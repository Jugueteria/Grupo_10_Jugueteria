import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["quickFilterParser", "debounceMs"];
import * as React from 'react';
import PropTypes from 'prop-types';
import TextField from '@mui/material/TextField';
import { styled } from '@mui/material/styles';
import { debounce } from '@mui/material/utils';
import { useGridApiContext } from '../../hooks/utils/useGridApiContext';
import { useGridRootProps } from '../../hooks/utils/useGridRootProps';
import { jsx as _jsx } from "react/jsx-runtime";
var GridToolbarQuickFilterRoot = styled(TextField, {
  name: 'MuiDataGrid',
  slot: 'ToolbarQuickFilter',
  overridesResolver: function overridesResolver(props, styles) {
    return styles.toolbarQuickFilter;
  }
})(function (_ref) {
  var theme = _ref.theme;
  return {
    width: 'auto',
    paddingBottom: theme.spacing(0.5),
    '& .MuiSvgIcon-root': {
      marginRight: theme.spacing(0.5)
    },
    '& .MuiInput-underline:before': {
      borderBottom: "1px solid ".concat(theme.palette.divider)
    }
  };
});

var defaultSearchValueParser = function defaultSearchValueParser(searchText) {
  return searchText.split(' ').filter(function (word) {
    return word !== '';
  });
};

function GridToolbarQuickFilter(props) {
  var _rootProps$components;

  var _props$quickFilterPar = props.quickFilterParser,
      quickFilterParser = _props$quickFilterPar === void 0 ? defaultSearchValueParser : _props$quickFilterPar,
      _props$debounceMs = props.debounceMs,
      debounceMs = _props$debounceMs === void 0 ? 500 : _props$debounceMs,
      other = _objectWithoutProperties(props, _excluded);

  var apiRef = useGridApiContext();
  var rootProps = useGridRootProps();

  var _React$useState = React.useState(''),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      searchValue = _React$useState2[0],
      setSearchValue = _React$useState2[1];

  var updateSearchValue = React.useCallback(function (newSearchValue) {
    apiRef.current.setQuickFilterValues(quickFilterParser(newSearchValue));
  }, [apiRef, quickFilterParser]);
  var debouncedUpdateSearchValue = React.useMemo(function () {
    return debounce(updateSearchValue, debounceMs);
  }, [updateSearchValue, debounceMs]);
  var handleSearchValueChange = React.useCallback(function (event) {
    var newSearchValue = event.target.value;
    setSearchValue(newSearchValue);
    debouncedUpdateSearchValue(newSearchValue);
  }, [debouncedUpdateSearchValue]);
  return /*#__PURE__*/_jsx(GridToolbarQuickFilterRoot, _extends({
    as: rootProps.components.BaseTextField,
    variant: "standard",
    value: searchValue,
    onChange: handleSearchValueChange,
    placeholder: apiRef.current.getLocaleText('toolbarQuickFilterPlaceholder'),
    "aria-label": apiRef.current.getLocaleText('toolbarQuickFilterLabel'),
    type: "search",
    InputProps: {
      startAdornment: /*#__PURE__*/_jsx(rootProps.components.QuickFilterIcon, {
        fontSize: "small"
      })
    }
  }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField));
}

process.env.NODE_ENV !== "production" ? GridToolbarQuickFilter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "yarn proptypes"  |
  // ----------------------------------------------------------------------

  /**
   * The debounce time in milliseconds.
   * @default 500
   */
  debounceMs: PropTypes.number,

  /**
   * Function responsible for parsing text input in an array of independent values for quick filtering.
   * @param {string} input The value entered by the user
   * @returns {any[]} The array of value on which quick filter is applied
   */
  quickFilterParser: PropTypes.func
} : void 0;
export { GridToolbarQuickFilter };