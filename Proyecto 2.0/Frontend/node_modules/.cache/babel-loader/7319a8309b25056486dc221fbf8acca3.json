{"ast":null,"code":"import * as React from 'react';\nimport { debounce, ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityHeaderHeightSelector, gridDensityRowHeightSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\n\nconst hasScroll = _ref => {\n  let {\n    content,\n    container,\n    scrollBarSize\n  } = _ref;\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height; // We recalculate the scroll x to consider the size of the y scrollbar.\n\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\n\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const warningShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n\n    let scrollBarSize;\n\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n\n    const viewportOuterSize = {\n      width: rootDimensionsRef.current.width,\n      height: props.autoHeight ? rowsMeta.currentPageTotalHeight : rootDimensionsRef.current.height - headerHeight\n    };\n    const {\n      hasScrollX,\n      hasScrollY\n    } = hasScroll({\n      content: {\n        width: Math.round(columnsTotalWidth),\n        height: rowsMeta.currentPageTotalHeight\n      },\n      container: viewportOuterSize,\n      scrollBarSize\n    });\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, headerHeight, rowsMeta.currentPageTotalHeight]);\n  const resize = React.useCallback(() => {\n    updateGridDimensionsRef();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, [apiRef, updateGridDimensionsRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return 0;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    }); // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.unstable_getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / gridDensityRowHeightSelector(apiRef));\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions,\n    unstable_getViewportPageSize: getViewportPageSize,\n    unstable_updateGridDimensionsRef: updateGridDimensionsRef\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'GridDimensionsApi');\n  const debounceResize = React.useMemo(() => debounce(resize, 60), [resize]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size; // jsdom has no layout capabilities\n\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n\n    if (size.height === 0 && !warningShown.current && !props.autoHeight && !isJSDOM) {\n      logger.warn(['The parent of the grid has an empty height.', 'You need to make sure the container has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'You can find a solution in the docs:', 'https://mui.com/x/react-data-grid/layout/'].join('\\n'));\n      warningShown.current = true;\n    }\n\n    if (size.width === 0 && !warningShown.current && !isJSDOM) {\n      logger.warn(['The parent of the grid has an empty width.', 'You need to make sure the container has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'You can find a solution in the docs:', 'https://mui.com/x/react-data-grid/layout/'].join('\\n'));\n      warningShown.current = true;\n    }\n\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    debounceResize();\n  }, [props.autoHeight, debounceResize, logger, resize]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageSizeChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}","map":{"version":3,"names":["React","debounce","ownerDocument","unstable_useEnhancedEffect","useEnhancedEffect","useGridApiEventHandler","useGridApiOptionHandler","useGridApiMethod","useGridLogger","gridColumnsTotalWidthSelector","gridDensityHeaderHeightSelector","gridDensityRowHeightSelector","useGridSelector","getVisibleRows","gridRowsMetaSelector","isTestEnvironment","process","env","NODE_ENV","hasScroll","content","container","scrollBarSize","hasScrollXIfNoYScrollBar","width","hasScrollYIfNoXScrollBar","height","hasScrollX","hasScrollY","useGridDimensions","apiRef","props","logger","warningShown","useRef","rootDimensionsRef","fullDimensionsRef","rowsMeta","headerHeight","updateGridDimensionsRef","useCallback","_apiRef$current$rootE","rootElement","current","rootElementRef","columnsTotalWidth","scrollbarSize","doc","scrollDiv","createElement","style","position","overflow","className","appendChild","offsetWidth","clientWidth","removeChild","viewportOuterSize","autoHeight","currentPageTotalHeight","Math","round","viewportInnerSize","newFullDimensions","prevDimensions","publishEvent","resize","getRootDimensions","getViewportPageSize","dimensions","currentPage","pagination","paginationMode","getRowHeight","renderContext","unstable_getRenderContext","viewportPageSize","lastRowIndex","firstRowIndex","min","rows","length","maximumPageSizeWithoutScrollBar","floor","dimensionsApi","unstable_getViewportPageSize","unstable_updateGridDimensionsRef","debounceResize","useMemo","isFirstSizing","handleResize","size","isJSDOM","test","window","navigator","userAgent","warn","join","onResize"],"sources":["/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js"],"sourcesContent":["import * as React from 'react';\nimport { debounce, ownerDocument, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnsTotalWidthSelector } from '../columns';\nimport { gridDensityHeaderHeightSelector, gridDensityRowHeightSelector } from '../density';\nimport { useGridSelector } from '../../utils';\nimport { getVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nconst isTestEnvironment = process.env.NODE_ENV === 'test';\n\nconst hasScroll = ({\n  content,\n  container,\n  scrollBarSize\n}) => {\n  const hasScrollXIfNoYScrollBar = content.width > container.width;\n  const hasScrollYIfNoXScrollBar = content.height > container.height;\n  let hasScrollX = false;\n  let hasScrollY = false;\n\n  if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {\n    hasScrollX = hasScrollXIfNoYScrollBar;\n    hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height; // We recalculate the scroll x to consider the size of the y scrollbar.\n\n    if (hasScrollY) {\n      hasScrollX = content.width + scrollBarSize > container.width;\n    }\n  }\n\n  return {\n    hasScrollX,\n    hasScrollY\n  };\n};\n\nexport function useGridDimensions(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useResizeContainer');\n  const warningShown = React.useRef(false);\n  const rootDimensionsRef = React.useRef(null);\n  const fullDimensionsRef = React.useRef(null);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const updateGridDimensionsRef = React.useCallback(() => {\n    var _apiRef$current$rootE;\n\n    const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;\n    const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);\n\n    if (!rootDimensionsRef.current) {\n      return;\n    }\n\n    let scrollBarSize;\n\n    if (props.scrollbarSize != null) {\n      scrollBarSize = props.scrollbarSize;\n    } else if (!columnsTotalWidth || !rootElement) {\n      scrollBarSize = 0;\n    } else {\n      const doc = ownerDocument(rootElement);\n      const scrollDiv = doc.createElement('div');\n      scrollDiv.style.width = '99px';\n      scrollDiv.style.height = '99px';\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.overflow = 'scroll';\n      scrollDiv.className = 'scrollDiv';\n      rootElement.appendChild(scrollDiv);\n      scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      rootElement.removeChild(scrollDiv);\n    }\n\n    const viewportOuterSize = {\n      width: rootDimensionsRef.current.width,\n      height: props.autoHeight ? rowsMeta.currentPageTotalHeight : rootDimensionsRef.current.height - headerHeight\n    };\n    const {\n      hasScrollX,\n      hasScrollY\n    } = hasScroll({\n      content: {\n        width: Math.round(columnsTotalWidth),\n        height: rowsMeta.currentPageTotalHeight\n      },\n      container: viewportOuterSize,\n      scrollBarSize\n    });\n    const viewportInnerSize = {\n      width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),\n      height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)\n    };\n    const newFullDimensions = {\n      viewportOuterSize,\n      viewportInnerSize,\n      hasScrollX,\n      hasScrollY\n    };\n    const prevDimensions = fullDimensionsRef.current;\n    fullDimensionsRef.current = newFullDimensions;\n\n    if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {\n      apiRef.current.publishEvent('viewportInnerSizeChange', newFullDimensions.viewportInnerSize);\n    }\n  }, [apiRef, props.scrollbarSize, props.autoHeight, headerHeight, rowsMeta.currentPageTotalHeight]);\n  const resize = React.useCallback(() => {\n    updateGridDimensionsRef();\n    apiRef.current.publishEvent('debouncedResize', rootDimensionsRef.current);\n  }, [apiRef, updateGridDimensionsRef]);\n  const getRootDimensions = React.useCallback(() => fullDimensionsRef.current, []);\n  const getViewportPageSize = React.useCallback(() => {\n    const dimensions = apiRef.current.getRootDimensions();\n\n    if (!dimensions) {\n      return 0;\n    }\n\n    const currentPage = getVisibleRows(apiRef, {\n      pagination: props.pagination,\n      paginationMode: props.paginationMode\n    }); // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n\n    if (props.getRowHeight) {\n      const renderContext = apiRef.current.unstable_getRenderContext();\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, currentPage.rows.length);\n    }\n\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / gridDensityRowHeightSelector(apiRef));\n    return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);\n  }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight]);\n  const dimensionsApi = {\n    resize,\n    getRootDimensions,\n    unstable_getViewportPageSize: getViewportPageSize,\n    unstable_updateGridDimensionsRef: updateGridDimensionsRef\n  };\n  useGridApiMethod(apiRef, dimensionsApi, 'GridDimensionsApi');\n  const debounceResize = React.useMemo(() => debounce(resize, 60), [resize]);\n  const isFirstSizing = React.useRef(true);\n  const handleResize = React.useCallback(size => {\n    rootDimensionsRef.current = size; // jsdom has no layout capabilities\n\n    const isJSDOM = /jsdom/.test(window.navigator.userAgent);\n\n    if (size.height === 0 && !warningShown.current && !props.autoHeight && !isJSDOM) {\n      logger.warn(['The parent of the grid has an empty height.', 'You need to make sure the container has an intrinsic height.', 'The grid displays with a height of 0px.', '', 'You can find a solution in the docs:', 'https://mui.com/x/react-data-grid/layout/'].join('\\n'));\n      warningShown.current = true;\n    }\n\n    if (size.width === 0 && !warningShown.current && !isJSDOM) {\n      logger.warn(['The parent of the grid has an empty width.', 'You need to make sure the container has an intrinsic width.', 'The grid displays with a width of 0px.', '', 'You can find a solution in the docs:', 'https://mui.com/x/react-data-grid/layout/'].join('\\n'));\n      warningShown.current = true;\n    }\n\n    if (isTestEnvironment) {\n      // We don't need to debounce the resize for tests.\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    if (isFirstSizing.current) {\n      // We want to initialize the grid dimensions as soon as possible to avoid flickering\n      resize();\n      isFirstSizing.current = false;\n      return;\n    }\n\n    debounceResize();\n  }, [props.autoHeight, debounceResize, logger, resize]);\n  useEnhancedEffect(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);\n  useGridApiOptionHandler(apiRef, 'sortedRowsSet', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'pageSizeChange', updateGridDimensionsRef);\n  useGridApiOptionHandler(apiRef, 'columnsChange', updateGridDimensionsRef);\n  useGridApiEventHandler(apiRef, 'resize', handleResize);\n  useGridApiOptionHandler(apiRef, 'debouncedResize', props.onResize);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}