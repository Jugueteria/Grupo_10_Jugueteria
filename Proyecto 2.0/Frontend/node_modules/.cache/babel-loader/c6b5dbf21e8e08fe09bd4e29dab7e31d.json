{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n      _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsCell = callback => function () {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...arguments);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = React.useCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onCellModesModelChange(newModel, details);\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  }, [apiRef, onCellModesModelChange, props.cellModesModel, signature]);\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    const newModel = _extends({}, cellModesModel);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _cellModesModel$id = cellModesModel[id],\n            otherFields = _objectWithoutPropertiesLoose(_cellModesModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [cellModesModel, updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue\n    } = params;\n    const newProps = {\n      value: deleteValue ? '' : apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const finishCellEditMode = () => {\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n    };\n\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateFieldInCellModesModel, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id][field].error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = cellModesModel;\n    Object.entries(cellModesModel).forEach(_ref => {\n      let [id, fields] = _ref;\n      Object.entries(fields).forEach(_ref2 => {\n        let [field, params] = _ref2;\n\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","useGridApiEventHandler","useGridApiOptionHandler","GridSignature","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","buildWarning","gridRowsIdToIdLookupSelector","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","cellModesModel","setCellModesModel","useState","prevCellModesModel","useRef","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","signature","runIfEditModeIsCell","callback","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","ctrlKey","metaKey","altKey","printableKeyDown","deleteKeyDown","handleCellEditStart","startCellEditModeParams","deleteValue","startCellEditMode","handleCellEditStop","cellToFocusAfter","ignoreModifications","editingState","state","isProcessingProps","stopCellEditMode","onCellEditStart","onCellEditStop","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","details","DataGridPro","api","updateFieldInCellModesModel","newProps","_cellModesModel$id","otherFields","map","Object","keys","length","updateOrDeleteFieldState","setState","newEditingState","editRows","forceUpdate","other","updateStateToStartCellEditMode","value","getCellValue","error","setCellFocus","updateStateToStopCellEditMode","unstable_runPendingEditCellValueMutation","finishCellEditMode","unstable_moveFocusToRelativeCell","rowUpdate","unstable_getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","row","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","column","getColumn","parsedValue","valueParser","preProcessEditCellProps","hasChanged","getRowWithUpdatedValuesFromCellEditing","valueSetter","editingApi","unstable_setCellEditingEditCellValue","useEffect","idToIdLookup","copyOfPrevCellModes","entries","forEach","fields","_copyOfPrevCellModes$","_copyOfPrevCellModes$2","_idToIdLookup$id","prevMode","originalId"],"sources":["/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@mui/x-data-grid/hooks/features/editRows/useGridCellEditing.new.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n      _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { useGridApiEventHandler, useGridApiOptionHandler, GridSignature } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange,\n    signature\n  } = props;\n\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      let reason;\n\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n\n      if (isPrintableKey(event.key)) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n          return;\n        }\n\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n\n    if (reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.printableKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    let cellToFocusAfter;\n\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n\n    let ignoreModifications = reason === 'escapeKeyDown';\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    if (editingState[id][field].isProcessingProps) {\n      // The user wants to stop editing the cell but we can't wait for the props to be processed.\n      // In this case, discard the modifications.\n      ignoreModifications = true;\n    }\n\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = React.useCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      const details = signature === GridSignature.DataGridPro ? {\n        api: apiRef.current\n      } : {};\n      onCellModesModelChange(newModel, details);\n    }\n\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  }, [apiRef, onCellModesModelChange, props.cellModesModel, signature]);\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    const newModel = _extends({}, cellModesModel);\n\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _cellModesModel$id = cellModesModel[id],\n            otherFields = _objectWithoutPropertiesLoose(_cellModesModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n\n\n      newModel[id] = otherFields;\n\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n\n    updateCellModesModel(newModel);\n  }, [cellModesModel, updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded);\n\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue\n    } = params;\n    const newProps = {\n      value: deleteValue ? '' : apiRef.current.getCellValue(id, field),\n      error: false,\n      isProcessingProps: false\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  }, [apiRef, updateOrDeleteFieldState]);\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n      id,\n      field\n    } = params,\n          other = _objectWithoutPropertiesLoose(params, _excluded2);\n\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.unstable_runPendingEditCellValueMutation(id, field);\n\n    const finishCellEditMode = () => {\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.unstable_moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n    };\n\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      return;\n    }\n\n    const rowUpdate = apiRef.current.unstable_getRowWithUpdatedValuesFromCellEditing(id, field);\n\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  }, [apiRef, onProcessRowUpdateError, processRowUpdate, throwIfNotInMode, updateFieldInCellModesModel, updateOrDeleteFieldState]);\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n\n    if (column.valueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue\n    });\n\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    } // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n\n\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    }); // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id][field].error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      value\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode,\n    unstable_setCellEditingEditCellValue: setCellEditingEditCellValue,\n    unstable_getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'EditingApi');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsIdToIdLookupSelector(apiRef); // Update the ref here because updateStateToStopCellEditMode may change it later\n\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = cellModesModel;\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        var _copyOfPrevCellModes$, _copyOfPrevCellModes$2, _idToIdLookup$id;\n\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null ? void 0 : (_copyOfPrevCellModes$2 = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$2.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}