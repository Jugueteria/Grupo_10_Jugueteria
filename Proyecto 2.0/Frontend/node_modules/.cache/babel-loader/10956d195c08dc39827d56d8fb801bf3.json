{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridVisibleTopLevelRowCountSelector } from '../filter';\nimport { gridPageSelector, gridPageSizeSelector } from './gridPaginationSelector';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { buildWarning } from '../../../utils/warning';\nexport const getPageCount = (rowCount, pageSize) => {\n  if (pageSize > 0 && rowCount > 0) {\n    return Math.ceil(rowCount / pageSize);\n  }\n\n  return 0;\n};\n\nconst applyValidPage = paginationState => {\n  if (!paginationState.pageCount) {\n    return paginationState;\n  }\n\n  return _extends({}, paginationState, {\n    page: Math.max(Math.min(paginationState.page, paginationState.pageCount - 1), 0)\n  });\n};\n\nconst mergeStateWithPage = page => state => _extends({}, state, {\n  pagination: applyValidPage(_extends({}, state.pagination, {\n    page\n  }))\n});\n\nconst noRowCountInServerMode = buildWarning([\"MUI: the 'rowCount' prop is undefined while using paginationMode='server'\", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');\n/**\n * @requires useGridPageSize (event)\n */\n\nexport const useGridPage = (apiRef, props) => {\n  var _props$initialState2, _props$initialState2$;\n\n  const logger = useGridLogger(apiRef, 'useGridPage');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'page',\n    propModel: props.page,\n    propOnChange: props.onPageChange,\n    stateSelector: gridPageSelector,\n    changeEvent: 'pageChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPage = React.useCallback(page => {\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setState(mergeStateWithPage(page));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageApi = {\n    setPage\n  };\n  useGridApiMethod(apiRef, pageApi, 'GridPageApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState, _props$initialState$p;\n\n    const pageToExport = gridPageSelector(apiRef);\n    const shouldExportPage = // Always export if the page is controlled\n    props.page != null || // Always export if the page has been initialized\n    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.page) != null || // Export if the page value is not equal to the default value\n    pageToExport !== 0;\n\n    if (!shouldExportPage) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        page: pageToExport\n      })\n    });\n  }, [apiRef, props.page, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto, _context$stateToResto2; // We apply the constraint even if the page did not change in case the pageSize changed.\n\n\n    const page = (_context$stateToResto = (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.page) != null ? _context$stateToResto : gridPageSelector(apiRef);\n    apiRef.current.setState(mergeStateWithPage(page));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handlePageSizeChange = pageSize => {\n    apiRef.current.setState(state => {\n      const pageCount = getPageCount(state.pagination.rowCount, pageSize);\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          pageCount,\n          page: state.pagination.page\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  };\n\n  const handlePageChange = () => apiRef.current.scrollToIndexes({\n    rowIndex: gridPageSelector(apiRef) * gridPageSizeSelector(apiRef)\n  });\n\n  useGridApiEventHandler(apiRef, 'pageSizeChange', handlePageSizeChange);\n  useGridApiEventHandler(apiRef, 'pageChange', handlePageChange);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    apiRef.current.setState(state => {\n      const rowCount = props.rowCount !== undefined ? props.rowCount : visibleTopLevelRowCount;\n      const pageCount = getPageCount(rowCount, state.pagination.pageSize);\n      const page = props.page == null ? state.pagination.page : props.page;\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          page,\n          rowCount,\n          pageCount\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [visibleTopLevelRowCount, props.rowCount, props.page, props.paginationMode, apiRef]);\n};","map":{"version":3,"names":["_extends","React","useGridLogger","useGridSelector","useGridApiMethod","useGridApiEventHandler","gridVisibleTopLevelRowCountSelector","gridPageSelector","gridPageSizeSelector","useGridRegisterPipeProcessor","buildWarning","getPageCount","rowCount","pageSize","Math","ceil","applyValidPage","paginationState","pageCount","page","max","min","mergeStateWithPage","state","pagination","noRowCountInServerMode","useGridPage","apiRef","props","_props$initialState2","_props$initialState2$","logger","visibleTopLevelRowCount","current","unstable_updateControlState","stateId","propModel","propOnChange","onPageChange","stateSelector","changeEvent","setPage","useCallback","debug","setState","forceUpdate","pageApi","stateExportPreProcessing","prevState","_props$initialState","_props$initialState$p","pageToExport","shouldExportPage","initialState","stateRestorePreProcessing","params","context","_context$stateToResto","_context$stateToResto2","stateToRestore","handlePageSizeChange","handlePageChange","scrollToIndexes","rowIndex","useEffect","process","env","NODE_ENV","paginationMode","undefined"],"sources":["/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPage.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridVisibleTopLevelRowCountSelector } from '../filter';\nimport { gridPageSelector, gridPageSizeSelector } from './gridPaginationSelector';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { buildWarning } from '../../../utils/warning';\nexport const getPageCount = (rowCount, pageSize) => {\n  if (pageSize > 0 && rowCount > 0) {\n    return Math.ceil(rowCount / pageSize);\n  }\n\n  return 0;\n};\n\nconst applyValidPage = paginationState => {\n  if (!paginationState.pageCount) {\n    return paginationState;\n  }\n\n  return _extends({}, paginationState, {\n    page: Math.max(Math.min(paginationState.page, paginationState.pageCount - 1), 0)\n  });\n};\n\nconst mergeStateWithPage = page => state => _extends({}, state, {\n  pagination: applyValidPage(_extends({}, state.pagination, {\n    page\n  }))\n});\n\nconst noRowCountInServerMode = buildWarning([\"MUI: the 'rowCount' prop is undefined while using paginationMode='server'\", 'For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation'], 'error');\n/**\n * @requires useGridPageSize (event)\n */\n\nexport const useGridPage = (apiRef, props) => {\n  var _props$initialState2, _props$initialState2$;\n\n  const logger = useGridLogger(apiRef, 'useGridPage');\n  const visibleTopLevelRowCount = useGridSelector(apiRef, gridVisibleTopLevelRowCountSelector);\n  apiRef.current.unstable_updateControlState({\n    stateId: 'page',\n    propModel: props.page,\n    propOnChange: props.onPageChange,\n    stateSelector: gridPageSelector,\n    changeEvent: 'pageChange'\n  });\n  /**\n   * API METHODS\n   */\n\n  const setPage = React.useCallback(page => {\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setState(mergeStateWithPage(page));\n    apiRef.current.forceUpdate();\n  }, [apiRef, logger]);\n  const pageApi = {\n    setPage\n  };\n  useGridApiMethod(apiRef, pageApi, 'GridPageApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    var _props$initialState, _props$initialState$p;\n\n    const pageToExport = gridPageSelector(apiRef);\n    const shouldExportPage = // Always export if the page is controlled\n    props.page != null || // Always export if the page has been initialized\n    ((_props$initialState = props.initialState) == null ? void 0 : (_props$initialState$p = _props$initialState.pagination) == null ? void 0 : _props$initialState$p.page) != null || // Export if the page value is not equal to the default value\n    pageToExport !== 0;\n\n    if (!shouldExportPage) {\n      return prevState;\n    }\n\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        page: pageToExport\n      })\n    });\n  }, [apiRef, props.page, (_props$initialState2 = props.initialState) == null ? void 0 : (_props$initialState2$ = _props$initialState2.pagination) == null ? void 0 : _props$initialState2$.page]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto, _context$stateToResto2;\n\n    // We apply the constraint even if the page did not change in case the pageSize changed.\n    const page = (_context$stateToResto = (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.page) != null ? _context$stateToResto : gridPageSelector(apiRef);\n    apiRef.current.setState(mergeStateWithPage(page));\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const handlePageSizeChange = pageSize => {\n    apiRef.current.setState(state => {\n      const pageCount = getPageCount(state.pagination.rowCount, pageSize);\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          pageCount,\n          page: state.pagination.page\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  };\n\n  const handlePageChange = () => apiRef.current.scrollToIndexes({\n    rowIndex: gridPageSelector(apiRef) * gridPageSizeSelector(apiRef)\n  });\n\n  useGridApiEventHandler(apiRef, 'pageSizeChange', handlePageSizeChange);\n  useGridApiEventHandler(apiRef, 'pageChange', handlePageChange);\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (props.paginationMode === 'server' && props.rowCount == null) {\n        noRowCountInServerMode();\n      }\n    }\n  }, [props.rowCount, props.paginationMode]);\n  React.useEffect(() => {\n    apiRef.current.setState(state => {\n      const rowCount = props.rowCount !== undefined ? props.rowCount : visibleTopLevelRowCount;\n      const pageCount = getPageCount(rowCount, state.pagination.pageSize);\n      const page = props.page == null ? state.pagination.page : props.page;\n      return _extends({}, state, {\n        pagination: applyValidPage(_extends({}, state.pagination, {\n          page,\n          rowCount,\n          pageCount\n        }))\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [visibleTopLevelRowCount, props.rowCount, props.page, props.paginationMode, apiRef]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}