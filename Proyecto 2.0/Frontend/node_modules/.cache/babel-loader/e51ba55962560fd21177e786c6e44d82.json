{"ast":null,"code":"import * as React from 'react';\nimport { useFirstRender } from '../../utils/useFirstRender';\nexport const useGridRegisterPipeProcessor = (apiRef, group, callback) => {\n  const cleanup = React.useRef();\n  const id = React.useRef(`mui-${Math.round(Math.random() * 1e9)}`);\n  const registerPreProcessor = React.useCallback(() => {\n    cleanup.current = apiRef.current.unstable_registerPipeProcessor(group, id.current, callback);\n  }, [apiRef, callback, group]);\n  useFirstRender(() => {\n    registerPreProcessor();\n  });\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else {\n      registerPreProcessor();\n    }\n\n    return () => {\n      if (cleanup.current) {\n        cleanup.current();\n        cleanup.current = null;\n      }\n    };\n  }, [registerPreProcessor]);\n};","map":{"version":3,"names":["React","useFirstRender","useGridRegisterPipeProcessor","apiRef","group","callback","cleanup","useRef","id","Math","round","random","registerPreProcessor","useCallback","current","unstable_registerPipeProcessor","isFirstRender","useEffect"],"sources":["/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js"],"sourcesContent":["import * as React from 'react';\nimport { useFirstRender } from '../../utils/useFirstRender';\nexport const useGridRegisterPipeProcessor = (apiRef, group, callback) => {\n  const cleanup = React.useRef();\n  const id = React.useRef(`mui-${Math.round(Math.random() * 1e9)}`);\n  const registerPreProcessor = React.useCallback(() => {\n    cleanup.current = apiRef.current.unstable_registerPipeProcessor(group, id.current, callback);\n  }, [apiRef, callback, group]);\n  useFirstRender(() => {\n    registerPreProcessor();\n  });\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    } else {\n      registerPreProcessor();\n    }\n\n    return () => {\n      if (cleanup.current) {\n        cleanup.current();\n        cleanup.current = null;\n      }\n    };\n  }, [registerPreProcessor]);\n};"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,OAAO,MAAMC,4BAA4B,GAAG,CAACC,MAAD,EAASC,KAAT,EAAgBC,QAAhB,KAA6B;EACvE,MAAMC,OAAO,GAAGN,KAAK,CAACO,MAAN,EAAhB;EACA,MAAMC,EAAE,GAAGR,KAAK,CAACO,MAAN,CAAc,OAAME,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAgC,EAApD,CAAX;EACA,MAAMC,oBAAoB,GAAGZ,KAAK,CAACa,WAAN,CAAkB,MAAM;IACnDP,OAAO,CAACQ,OAAR,GAAkBX,MAAM,CAACW,OAAP,CAAeC,8BAAf,CAA8CX,KAA9C,EAAqDI,EAAE,CAACM,OAAxD,EAAiET,QAAjE,CAAlB;EACD,CAF4B,EAE1B,CAACF,MAAD,EAASE,QAAT,EAAmBD,KAAnB,CAF0B,CAA7B;EAGAH,cAAc,CAAC,MAAM;IACnBW,oBAAoB;EACrB,CAFa,CAAd;EAGA,MAAMI,aAAa,GAAGhB,KAAK,CAACO,MAAN,CAAa,IAAb,CAAtB;EACAP,KAAK,CAACiB,SAAN,CAAgB,MAAM;IACpB,IAAID,aAAa,CAACF,OAAlB,EAA2B;MACzBE,aAAa,CAACF,OAAd,GAAwB,KAAxB;IACD,CAFD,MAEO;MACLF,oBAAoB;IACrB;;IAED,OAAO,MAAM;MACX,IAAIN,OAAO,CAACQ,OAAZ,EAAqB;QACnBR,OAAO,CAACQ,OAAR;QACAR,OAAO,CAACQ,OAAR,GAAkB,IAAlB;MACD;IACF,CALD;EAMD,CAbD,EAaG,CAACF,oBAAD,CAbH;AAcD,CAxBM"},"metadata":{},"sourceType":"module"}