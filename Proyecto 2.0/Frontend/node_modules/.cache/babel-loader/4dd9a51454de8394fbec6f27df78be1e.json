{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { buildWarning } from '../../../utils/warning';\nconst sortModelDisableMultiColumnsSortingWarning = buildWarning(['MUI: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');\nexport const sanitizeSortModel = (model, disableMultipleColumnsSorting) => {\n  if (disableMultipleColumnsSorting && model.length > 1) {\n    sortModelDisableMultiColumnsSortingWarning();\n    return [model[0]];\n  }\n\n  return model;\n};\nexport const mergeStateWithSortModel = (sortModel, disableMultipleColumnsSorting) => state => _extends({}, state, {\n  sorting: _extends({}, state.sorting, {\n    sortModel: sanitizeSortModel(sortModel, disableMultipleColumnsSorting)\n  })\n});\n\nconst isDesc = direction => direction === 'desc';\n/**\n * Transform an item of the sorting model into a method comparing two rows.\n * @param {GridSortItem} sortItem The sort item we want to apply.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridParsedSortItem | null} The parsed sort item. Returns `null` is the sort item is not valid.\n */\n\n\nconst parseSortItem = (sortItem, apiRef) => {\n  const column = apiRef.current.getColumn(sortItem.field);\n\n  if (!column) {\n    return null;\n  }\n\n  const comparator = isDesc(sortItem.sort) ? function () {\n    return -1 * column.sortComparator(...arguments);\n  } : column.sortComparator;\n\n  const getSortCellParams = id => ({\n    id,\n    field: column.field,\n    rowNode: apiRef.current.getRowNode(id),\n    value: apiRef.current.getCellValue(id, column.field),\n    api: apiRef.current\n  });\n\n  return {\n    getSortCellParams,\n    comparator\n  };\n};\n/**\n * Compare two rows according to a list of valid sort items.\n * The `row1Params` and `row2Params` must have the same length as `parsedSortItems`,\n * and each of their index must contain the `GridSortCellParams` of the sort item with the same index.\n * @param {GridParsedSortItem[]} parsedSortItems All the sort items with which we want to compare the rows.\n * @param {GridSortCellParams} row1Params The params of the 1st row for each sort item.\n * @param {GridSortCellParams} row2Params The params of the 2nd row for each sort item.\n */\n\n\nconst compareRows = (parsedSortItems, row1Params, row2Params) => {\n  return parsedSortItems.reduce((res, item, index) => {\n    if (res !== 0) {\n      // return the results of the first comparator which distinguish the two rows\n      return res;\n    }\n\n    const sortCellParams1 = row1Params[index];\n    const sortCellParams2 = row2Params[index];\n    res = item.comparator(sortCellParams1.value, sortCellParams2.value, sortCellParams1, sortCellParams2);\n    return res;\n  }, 0);\n};\n/**\n * Generates a method to easily sort a list of rows according to the current sort model.\n * @param {GridSortModel} sortModel The model with which we want to sort the rows.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridSortingModelApplier | null} A method that generates a list of sorted row ids from a list of rows according to the current sort model. If `null`, we consider that the rows should remain in the order there were provided.\n */\n\n\nexport const buildAggregatedSortingApplier = (sortModel, apiRef) => {\n  const comparatorList = sortModel.map(item => parseSortItem(item, apiRef)).filter(comparator => !!comparator);\n\n  if (comparatorList.length === 0) {\n    return null;\n  }\n\n  return rowList => rowList.map(value => ({\n    value,\n    params: comparatorList.map(el => el.getSortCellParams(value.id))\n  })).sort((a, b) => compareRows(comparatorList, a.params, b.params)).map(row => row.value.id);\n};\nexport const getNextGridSortDirection = (sortingOrder, current) => {\n  const currentIdx = sortingOrder.indexOf(current);\n\n  if (!current || currentIdx === -1 || currentIdx + 1 === sortingOrder.length) {\n    return sortingOrder[0];\n  }\n\n  return sortingOrder[currentIdx + 1];\n};\n\nconst gridNillComparator = (v1, v2) => {\n  if (v1 == null && v2 != null) {\n    return -1;\n  }\n\n  if (v2 == null && v1 != null) {\n    return 1;\n  }\n\n  if (v1 == null && v2 == null) {\n    return 0;\n  }\n\n  return null;\n};\n\nconst collator = new Intl.Collator();\nexport const gridStringOrNumberComparator = (value1, value2) => {\n  const nillResult = gridNillComparator(value1, value2);\n\n  if (nillResult !== null) {\n    return nillResult;\n  }\n\n  if (typeof value1 === 'string') {\n    return collator.compare(value1.toString(), value2.toString());\n  }\n\n  return value1 - value2;\n};\nexport const gridNumberComparator = (value1, value2) => {\n  const nillResult = gridNillComparator(value1, value2);\n\n  if (nillResult !== null) {\n    return nillResult;\n  }\n\n  return Number(value1) - Number(value2);\n};\nexport const gridDateComparator = (value1, value2) => {\n  const nillResult = gridNillComparator(value1, value2);\n\n  if (nillResult !== null) {\n    return nillResult;\n  }\n\n  if (value1 > value2) {\n    return 1;\n  }\n\n  if (value1 < value2) {\n    return -1;\n  }\n\n  return 0;\n};","map":{"version":3,"names":["_extends","buildWarning","sortModelDisableMultiColumnsSortingWarning","sanitizeSortModel","model","disableMultipleColumnsSorting","length","mergeStateWithSortModel","sortModel","state","sorting","isDesc","direction","parseSortItem","sortItem","apiRef","column","current","getColumn","field","comparator","sort","sortComparator","getSortCellParams","id","rowNode","getRowNode","value","getCellValue","api","compareRows","parsedSortItems","row1Params","row2Params","reduce","res","item","index","sortCellParams1","sortCellParams2","buildAggregatedSortingApplier","comparatorList","map","filter","rowList","params","el","a","b","row","getNextGridSortDirection","sortingOrder","currentIdx","indexOf","gridNillComparator","v1","v2","collator","Intl","Collator","gridStringOrNumberComparator","value1","value2","nillResult","compare","toString","gridNumberComparator","Number","gridDateComparator"],"sources":["/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { buildWarning } from '../../../utils/warning';\nconst sortModelDisableMultiColumnsSortingWarning = buildWarning(['MUI: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');\nexport const sanitizeSortModel = (model, disableMultipleColumnsSorting) => {\n  if (disableMultipleColumnsSorting && model.length > 1) {\n    sortModelDisableMultiColumnsSortingWarning();\n    return [model[0]];\n  }\n\n  return model;\n};\nexport const mergeStateWithSortModel = (sortModel, disableMultipleColumnsSorting) => state => _extends({}, state, {\n  sorting: _extends({}, state.sorting, {\n    sortModel: sanitizeSortModel(sortModel, disableMultipleColumnsSorting)\n  })\n});\n\nconst isDesc = direction => direction === 'desc';\n/**\n * Transform an item of the sorting model into a method comparing two rows.\n * @param {GridSortItem} sortItem The sort item we want to apply.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridParsedSortItem | null} The parsed sort item. Returns `null` is the sort item is not valid.\n */\n\n\nconst parseSortItem = (sortItem, apiRef) => {\n  const column = apiRef.current.getColumn(sortItem.field);\n\n  if (!column) {\n    return null;\n  }\n\n  const comparator = isDesc(sortItem.sort) ? (...args) => -1 * column.sortComparator(...args) : column.sortComparator;\n\n  const getSortCellParams = id => ({\n    id,\n    field: column.field,\n    rowNode: apiRef.current.getRowNode(id),\n    value: apiRef.current.getCellValue(id, column.field),\n    api: apiRef.current\n  });\n\n  return {\n    getSortCellParams,\n    comparator\n  };\n};\n/**\n * Compare two rows according to a list of valid sort items.\n * The `row1Params` and `row2Params` must have the same length as `parsedSortItems`,\n * and each of their index must contain the `GridSortCellParams` of the sort item with the same index.\n * @param {GridParsedSortItem[]} parsedSortItems All the sort items with which we want to compare the rows.\n * @param {GridSortCellParams} row1Params The params of the 1st row for each sort item.\n * @param {GridSortCellParams} row2Params The params of the 2nd row for each sort item.\n */\n\n\nconst compareRows = (parsedSortItems, row1Params, row2Params) => {\n  return parsedSortItems.reduce((res, item, index) => {\n    if (res !== 0) {\n      // return the results of the first comparator which distinguish the two rows\n      return res;\n    }\n\n    const sortCellParams1 = row1Params[index];\n    const sortCellParams2 = row2Params[index];\n    res = item.comparator(sortCellParams1.value, sortCellParams2.value, sortCellParams1, sortCellParams2);\n    return res;\n  }, 0);\n};\n/**\n * Generates a method to easily sort a list of rows according to the current sort model.\n * @param {GridSortModel} sortModel The model with which we want to sort the rows.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridSortingModelApplier | null} A method that generates a list of sorted row ids from a list of rows according to the current sort model. If `null`, we consider that the rows should remain in the order there were provided.\n */\n\n\nexport const buildAggregatedSortingApplier = (sortModel, apiRef) => {\n  const comparatorList = sortModel.map(item => parseSortItem(item, apiRef)).filter(comparator => !!comparator);\n\n  if (comparatorList.length === 0) {\n    return null;\n  }\n\n  return rowList => rowList.map(value => ({\n    value,\n    params: comparatorList.map(el => el.getSortCellParams(value.id))\n  })).sort((a, b) => compareRows(comparatorList, a.params, b.params)).map(row => row.value.id);\n};\nexport const getNextGridSortDirection = (sortingOrder, current) => {\n  const currentIdx = sortingOrder.indexOf(current);\n\n  if (!current || currentIdx === -1 || currentIdx + 1 === sortingOrder.length) {\n    return sortingOrder[0];\n  }\n\n  return sortingOrder[currentIdx + 1];\n};\n\nconst gridNillComparator = (v1, v2) => {\n  if (v1 == null && v2 != null) {\n    return -1;\n  }\n\n  if (v2 == null && v1 != null) {\n    return 1;\n  }\n\n  if (v1 == null && v2 == null) {\n    return 0;\n  }\n\n  return null;\n};\n\nconst collator = new Intl.Collator();\nexport const gridStringOrNumberComparator = (value1, value2) => {\n  const nillResult = gridNillComparator(value1, value2);\n\n  if (nillResult !== null) {\n    return nillResult;\n  }\n\n  if (typeof value1 === 'string') {\n    return collator.compare(value1.toString(), value2.toString());\n  }\n\n  return value1 - value2;\n};\nexport const gridNumberComparator = (value1, value2) => {\n  const nillResult = gridNillComparator(value1, value2);\n\n  if (nillResult !== null) {\n    return nillResult;\n  }\n\n  return Number(value1) - Number(value2);\n};\nexport const gridDateComparator = (value1, value2) => {\n  const nillResult = gridNillComparator(value1, value2);\n\n  if (nillResult !== null) {\n    return nillResult;\n  }\n\n  if (value1 > value2) {\n    return 1;\n  }\n\n  if (value1 < value2) {\n    return -1;\n  }\n\n  return 0;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}