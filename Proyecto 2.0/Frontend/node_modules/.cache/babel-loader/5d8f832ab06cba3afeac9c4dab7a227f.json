{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridColumnMenuSelector } from './columnMenuSelector';\nexport const columnMenuStateInitializer = state => _extends({}, state, {\n  columnMenu: {\n    open: false\n  }\n});\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\n\nexport const useGridColumnMenu = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridColumnMenu');\n  /**\n   * API METHODS\n   */\n\n  const showColumnMenu = React.useCallback(field => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (state.columnMenu.open && state.columnMenu.field === field) {\n        return state;\n      }\n\n      logger.debug('Opening Column Menu');\n      return _extends({}, state, {\n        columnMenu: {\n          open: true,\n          field\n        }\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.hidePreferences();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const hideColumnMenu = React.useCallback(() => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (!state.columnMenu.open && state.columnMenu.field === undefined) {\n        return state;\n      }\n\n      logger.debug('Hiding Column Menu');\n      return _extends({}, state, {\n        columnMenu: _extends({}, state.columnMenu, {\n          open: false,\n          field: undefined\n        })\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const toggleColumnMenu = React.useCallback(field => {\n    logger.debug('Toggle Column Menu');\n    const columnMenu = gridColumnMenuSelector(apiRef.current.state);\n\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  const columnMenuApi = {\n    showColumnMenu,\n    hideColumnMenu,\n    toggleColumnMenu\n  };\n  useGridApiMethod(apiRef, columnMenuApi, 'GridColumnMenuApi');\n  /**\n   * EVENTS\n   */\n\n  useGridApiEventHandler(apiRef, 'columnResizeStart', hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);\n};","map":{"version":3,"names":["_extends","React","useGridLogger","useGridApiMethod","useGridApiEventHandler","gridColumnMenuSelector","columnMenuStateInitializer","state","columnMenu","open","useGridColumnMenu","apiRef","logger","showColumnMenu","useCallback","field","shouldUpdate","current","setState","debug","hidePreferences","forceUpdate","hideColumnMenu","undefined","toggleColumnMenu","columnMenuApi"],"sources":["/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridLogger, useGridApiMethod, useGridApiEventHandler } from '../../utils';\nimport { gridColumnMenuSelector } from './columnMenuSelector';\nexport const columnMenuStateInitializer = state => _extends({}, state, {\n  columnMenu: {\n    open: false\n  }\n});\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\n\nexport const useGridColumnMenu = apiRef => {\n  const logger = useGridLogger(apiRef, 'useGridColumnMenu');\n  /**\n   * API METHODS\n   */\n\n  const showColumnMenu = React.useCallback(field => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (state.columnMenu.open && state.columnMenu.field === field) {\n        return state;\n      }\n\n      logger.debug('Opening Column Menu');\n      return _extends({}, state, {\n        columnMenu: {\n          open: true,\n          field\n        }\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.hidePreferences();\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const hideColumnMenu = React.useCallback(() => {\n    const shouldUpdate = apiRef.current.setState(state => {\n      if (!state.columnMenu.open && state.columnMenu.field === undefined) {\n        return state;\n      }\n\n      logger.debug('Hiding Column Menu');\n      return _extends({}, state, {\n        columnMenu: _extends({}, state.columnMenu, {\n          open: false,\n          field: undefined\n        })\n      });\n    });\n\n    if (shouldUpdate) {\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, logger]);\n  const toggleColumnMenu = React.useCallback(field => {\n    logger.debug('Toggle Column Menu');\n    const columnMenu = gridColumnMenuSelector(apiRef.current.state);\n\n    if (!columnMenu.open || columnMenu.field !== field) {\n      showColumnMenu(field);\n    } else {\n      hideColumnMenu();\n    }\n  }, [apiRef, logger, showColumnMenu, hideColumnMenu]);\n  const columnMenuApi = {\n    showColumnMenu,\n    hideColumnMenu,\n    toggleColumnMenu\n  };\n  useGridApiMethod(apiRef, columnMenuApi, 'GridColumnMenuApi');\n  /**\n   * EVENTS\n   */\n\n  useGridApiEventHandler(apiRef, 'columnResizeStart', hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerWheel', apiRef.current.hideColumnMenu);\n  useGridApiEventHandler(apiRef, 'virtualScrollerTouchMove', apiRef.current.hideColumnMenu);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}