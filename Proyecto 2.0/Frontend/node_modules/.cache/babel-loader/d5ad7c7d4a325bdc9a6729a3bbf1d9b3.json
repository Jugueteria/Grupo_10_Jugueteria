{"ast":null,"code":"import React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\n\nexport const useGridColumnSpanning = apiRef => {\n  const lookup = React.useRef({});\n  const setCellColSpanInfo = React.useCallback((rowId, columnIndex, cellColSpanInfo) => {\n    const sizes = lookup.current;\n\n    if (!sizes[rowId]) {\n      sizes[rowId] = {};\n    }\n\n    sizes[rowId][columnIndex] = cellColSpanInfo;\n  }, []);\n  const getCellColSpanInfo = React.useCallback((rowId, columnIndex) => {\n    var _lookup$current$rowId;\n\n    return (_lookup$current$rowId = lookup.current[rowId]) == null ? void 0 : _lookup$current$rowId[columnIndex];\n  }, []); // Calculate `colSpan` for the cell.\n\n  const calculateCellColSpan = React.useCallback(params => {\n    const {\n      columnIndex,\n      rowId,\n      minFirstColumnIndex,\n      maxLastColumnIndex\n    } = params;\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const columnsLength = visibleColumns.length;\n    const column = visibleColumns[columnIndex];\n    const colSpan = typeof column.colSpan === 'function' ? column.colSpan(apiRef.current.getCellParams(rowId, column.field)) : column.colSpan;\n\n    if (!colSpan || colSpan === 1) {\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan: 1,\n          width: column.computedWidth\n        }\n      });\n      return {\n        colSpan: 1\n      };\n    }\n\n    let width = column.computedWidth;\n\n    for (let j = 1; j < colSpan; j += 1) {\n      const nextColumnIndex = columnIndex + j; // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).\n\n      if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {\n        const nextColumn = visibleColumns[nextColumnIndex];\n        width += nextColumn.computedWidth;\n        setCellColSpanInfo(rowId, columnIndex + j, {\n          spannedByColSpan: true,\n          rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),\n          leftVisibleCellIndex: columnIndex\n        });\n      }\n\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan,\n          width\n        }\n      });\n    }\n\n    return {\n      colSpan\n    };\n  }, [apiRef, setCellColSpanInfo]); // Calculate `colSpan` for each cell in the row\n\n  const calculateColSpan = React.useCallback(_ref => {\n    let {\n      rowId,\n      minFirstColumn,\n      maxLastColumn\n    } = _ref;\n\n    for (let i = minFirstColumn; i < maxLastColumn; i += 1) {\n      const cellProps = calculateCellColSpan({\n        columnIndex: i,\n        rowId,\n        minFirstColumnIndex: minFirstColumn,\n        maxLastColumnIndex: maxLastColumn\n      });\n\n      if (cellProps.colSpan > 1) {\n        i += cellProps.colSpan - 1;\n      }\n    }\n  }, [calculateCellColSpan]);\n  const columnSpanningApi = {\n    unstable_getCellColSpanInfo: getCellColSpanInfo,\n    unstable_calculateColSpan: calculateColSpan\n  };\n  useGridApiMethod(apiRef, columnSpanningApi, 'GridColumnSpanningAPI');\n  const handleColumnReorderChange = React.useCallback(() => {\n    // `colSpan` needs to be recalculated after column reordering\n    lookup.current = {};\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnReorderChange);\n};","map":{"version":3,"names":["React","useGridApiMethod","useGridApiEventHandler","useGridColumnSpanning","apiRef","lookup","useRef","setCellColSpanInfo","useCallback","rowId","columnIndex","cellColSpanInfo","sizes","current","getCellColSpanInfo","_lookup$current$rowId","calculateCellColSpan","params","minFirstColumnIndex","maxLastColumnIndex","visibleColumns","getVisibleColumns","columnsLength","length","column","colSpan","getCellParams","field","spannedByColSpan","cellProps","width","computedWidth","j","nextColumnIndex","nextColumn","rightVisibleCellIndex","Math","min","leftVisibleCellIndex","calculateColSpan","minFirstColumn","maxLastColumn","i","columnSpanningApi","unstable_getCellColSpanInfo","unstable_calculateColSpan","handleColumnReorderChange"],"sources":["/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.js"],"sourcesContent":["import React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport const useGridColumnSpanning = apiRef => {\n  const lookup = React.useRef({});\n  const setCellColSpanInfo = React.useCallback((rowId, columnIndex, cellColSpanInfo) => {\n    const sizes = lookup.current;\n\n    if (!sizes[rowId]) {\n      sizes[rowId] = {};\n    }\n\n    sizes[rowId][columnIndex] = cellColSpanInfo;\n  }, []);\n  const getCellColSpanInfo = React.useCallback((rowId, columnIndex) => {\n    var _lookup$current$rowId;\n\n    return (_lookup$current$rowId = lookup.current[rowId]) == null ? void 0 : _lookup$current$rowId[columnIndex];\n  }, []); // Calculate `colSpan` for the cell.\n\n  const calculateCellColSpan = React.useCallback(params => {\n    const {\n      columnIndex,\n      rowId,\n      minFirstColumnIndex,\n      maxLastColumnIndex\n    } = params;\n    const visibleColumns = apiRef.current.getVisibleColumns();\n    const columnsLength = visibleColumns.length;\n    const column = visibleColumns[columnIndex];\n    const colSpan = typeof column.colSpan === 'function' ? column.colSpan(apiRef.current.getCellParams(rowId, column.field)) : column.colSpan;\n\n    if (!colSpan || colSpan === 1) {\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan: 1,\n          width: column.computedWidth\n        }\n      });\n      return {\n        colSpan: 1\n      };\n    }\n\n    let width = column.computedWidth;\n\n    for (let j = 1; j < colSpan; j += 1) {\n      const nextColumnIndex = columnIndex + j; // Cells should be spanned only within their column section (left-pinned, right-pinned and unpinned).\n\n      if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {\n        const nextColumn = visibleColumns[nextColumnIndex];\n        width += nextColumn.computedWidth;\n        setCellColSpanInfo(rowId, columnIndex + j, {\n          spannedByColSpan: true,\n          rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),\n          leftVisibleCellIndex: columnIndex\n        });\n      }\n\n      setCellColSpanInfo(rowId, columnIndex, {\n        spannedByColSpan: false,\n        cellProps: {\n          colSpan,\n          width\n        }\n      });\n    }\n\n    return {\n      colSpan\n    };\n  }, [apiRef, setCellColSpanInfo]); // Calculate `colSpan` for each cell in the row\n\n  const calculateColSpan = React.useCallback(({\n    rowId,\n    minFirstColumn,\n    maxLastColumn\n  }) => {\n    for (let i = minFirstColumn; i < maxLastColumn; i += 1) {\n      const cellProps = calculateCellColSpan({\n        columnIndex: i,\n        rowId,\n        minFirstColumnIndex: minFirstColumn,\n        maxLastColumnIndex: maxLastColumn\n      });\n\n      if (cellProps.colSpan > 1) {\n        i += cellProps.colSpan - 1;\n      }\n    }\n  }, [calculateCellColSpan]);\n  const columnSpanningApi = {\n    unstable_getCellColSpanInfo: getCellColSpanInfo,\n    unstable_calculateColSpan: calculateColSpan\n  };\n  useGridApiMethod(apiRef, columnSpanningApi, 'GridColumnSpanningAPI');\n  const handleColumnReorderChange = React.useCallback(() => {\n    // `colSpan` needs to be recalculated after column reordering\n    lookup.current = {};\n  }, []);\n  useGridApiEventHandler(apiRef, 'columnOrderChange', handleColumnReorderChange);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}