{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"getValue\", \"hasFocus\", \"isValidating\", \"isProcessingProps\", \"error\", \"onValueChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['editBooleanCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nfunction GridEditBooleanCell(props) {\n  var _rootProps$components;\n\n  const {\n    id: idProp,\n    value,\n    api,\n    field,\n    className,\n    hasFocus,\n    onValueChange\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const inputRef = React.useRef(null);\n  const id = useId();\n  const [valueState, setValueState] = React.useState(value);\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = React.useCallback(async event => {\n    const newValue = event.target.checked;\n\n    if (onValueChange) {\n      await onValueChange(event, newValue);\n    }\n\n    setValueState(newValue);\n    await api.setEditCellValue({\n      id: idProp,\n      field,\n      value: newValue\n    }, event);\n  }, [api, field, idProp, onValueChange]);\n  React.useEffect(() => {\n    setValueState(value);\n  }, [value]);\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(\"label\", _extends({\n    htmlFor: id,\n    className: clsx(classes.root, className)\n  }, other, {\n    children: /*#__PURE__*/_jsx(rootProps.components.BaseCheckbox, _extends({\n      id: id,\n      inputRef: inputRef,\n      checked: Boolean(valueState),\n      onChange: handleChange,\n      size: \"small\"\n    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox))\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditBooleanCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * Get the cell value of a row and field.\n   * @param {GridRowId} id The row id.\n   * @param {string} field The field.\n   * @returns {any} The cell value.\n   * @deprecated Use `params.row` to directly access the fields you want instead.\n   */\n  getValue: PropTypes.func.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.object.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n\n  /**\n   * The cell value, but if the column has valueGetter, use getValue.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditBooleanCell };\nexport const renderEditBooleanCell = params => /*#__PURE__*/_jsx(GridEditBooleanCell, _extends({}, params));","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","unstable_composeClasses","composeClasses","unstable_useId","useId","unstable_useEnhancedEffect","useEnhancedEffect","getDataGridUtilityClass","useGridRootProps","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridEditBooleanCell","props","_rootProps$components","id","idProp","value","api","field","className","hasFocus","onValueChange","other","inputRef","useRef","valueState","setValueState","useState","rootProps","handleChange","useCallback","event","newValue","target","checked","setEditCellValue","useEffect","current","focus","htmlFor","children","components","BaseCheckbox","Boolean","onChange","size","componentsProps","baseCheckbox","process","env","NODE_ENV","propTypes","any","isRequired","cellMode","oneOf","colDef","object","string","formattedValue","getValue","func","bool","oneOfType","number","isEditable","isProcessingProps","isValidating","row","rowNode","tabIndex","renderEditBooleanCell","params"],"sources":["/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@mui/x-data-grid/components/cell/GridEditBooleanCell.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"getValue\", \"hasFocus\", \"isValidating\", \"isProcessingProps\", \"error\", \"onValueChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['editBooleanCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nfunction GridEditBooleanCell(props) {\n  var _rootProps$components;\n\n  const {\n    id: idProp,\n    value,\n    api,\n    field,\n    className,\n    hasFocus,\n    onValueChange\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const inputRef = React.useRef(null);\n  const id = useId();\n  const [valueState, setValueState] = React.useState(value);\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = React.useCallback(async event => {\n    const newValue = event.target.checked;\n\n    if (onValueChange) {\n      await onValueChange(event, newValue);\n    }\n\n    setValueState(newValue);\n    await api.setEditCellValue({\n      id: idProp,\n      field,\n      value: newValue\n    }, event);\n  }, [api, field, idProp, onValueChange]);\n  React.useEffect(() => {\n    setValueState(value);\n  }, [value]);\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(\"label\", _extends({\n    htmlFor: id,\n    className: clsx(classes.root, className)\n  }, other, {\n    children: /*#__PURE__*/_jsx(rootProps.components.BaseCheckbox, _extends({\n      id: id,\n      inputRef: inputRef,\n      checked: Boolean(valueState),\n      onChange: handleChange,\n      size: \"small\"\n    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox))\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditBooleanCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n\n  /**\n   * Get the cell value of a row and field.\n   * @param {GridRowId} id The row id.\n   * @param {string} field The field.\n   * @returns {any} The cell value.\n   * @deprecated Use `params.row` to directly access the fields you want instead.\n   */\n  getValue: PropTypes.func.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.object.isRequired,\n\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n\n  /**\n   * The cell value, but if the column has valueGetter, use getValue.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditBooleanCell };\nexport const renderEditBooleanCell = params => /*#__PURE__*/_jsx(GridEditBooleanCell, _extends({}, params));"],"mappings":"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"},"metadata":{},"sourceType":"module"}