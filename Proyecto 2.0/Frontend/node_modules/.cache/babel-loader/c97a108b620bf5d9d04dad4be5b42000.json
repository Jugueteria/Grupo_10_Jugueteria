{"ast":null,"code":"import * as React from 'react';\nimport { TimerBasedCleanupTracking } from '../../utils/cleanupTracking/TimerBasedCleanupTracking';\nimport { FinalizationRegistryBasedCleanupTracking } from '../../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking';\n/**\n * Signal to the underlying logic what version of the public component API\n * of the data grid is exposed.\n */\n\nvar GridSignature;\n\n(function (GridSignature) {\n  GridSignature[\"DataGrid\"] = \"DataGrid\";\n  GridSignature[\"DataGridPro\"] = \"DataGridPro\";\n})(GridSignature || (GridSignature = {})); // We use class to make it easier to detect in heap snapshots by name\n\n\nclass ObjectToBeRetainedByReact {} // Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\n\n\nexport function createUseGridApiEventHandler(registryContainer) {\n  let cleanupTokensCounter = 0;\n  return function useGridApiEventHandler(apiRef, eventName, handler, options) {\n    if (registryContainer.registry === null) {\n      registryContainer.registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();\n    }\n\n    const [objectRetainedByReact] = React.useState(new ObjectToBeRetainedByReact());\n    const subscription = React.useRef(null);\n    const handlerRef = React.useRef();\n    handlerRef.current = handler;\n    const cleanupTokenRef = React.useRef(null);\n\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event, details) => {\n        if (!event.defaultMuiPrevented) {\n          var _handlerRef$current;\n\n          (_handlerRef$current = handlerRef.current) == null ? void 0 : _handlerRef$current.call(handlerRef, params, event, details);\n        }\n      };\n\n      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      cleanupTokensCounter += 1;\n      cleanupTokenRef.current = {\n        cleanupToken: cleanupTokensCounter\n      };\n      registryContainer.registry.register(objectRetainedByReact, // The callback below will be called once this reference stops being retained\n      () => {\n        var _subscription$current;\n\n        (_subscription$current = subscription.current) == null ? void 0 : _subscription$current.call(subscription);\n        subscription.current = null;\n        cleanupTokenRef.current = null;\n      }, cleanupTokenRef.current);\n    } else if (!handlerRef.current && subscription.current) {\n      subscription.current();\n      subscription.current = null;\n\n      if (cleanupTokenRef.current) {\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n    }\n\n    React.useEffect(() => {\n      if (!subscription.current && handlerRef.current) {\n        const enhancedHandler = (params, event, details) => {\n          if (!event.defaultMuiPrevented) {\n            var _handlerRef$current2;\n\n            (_handlerRef$current2 = handlerRef.current) == null ? void 0 : _handlerRef$current2.call(handlerRef, params, event, details);\n          }\n        };\n\n        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      }\n\n      if (cleanupTokenRef.current && registryContainer.registry) {\n        // If the effect was called, it means that this render was committed\n        // so we can trust the cleanup function to remove the listener.\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n\n      return () => {\n        var _subscription$current2;\n\n        (_subscription$current2 = subscription.current) == null ? void 0 : _subscription$current2.call(subscription);\n        subscription.current = null;\n      };\n    }, [apiRef, eventName, options]);\n  };\n}\nconst registryContainer = {\n  registry: null\n}; // TODO: move to @mui/x-data-grid/internals\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport const unstable_resetCleanupTracking = () => {\n  var _registryContainer$re;\n\n  (_registryContainer$re = registryContainer.registry) == null ? void 0 : _registryContainer$re.reset();\n  registryContainer.registry = null;\n};\nexport const useGridApiEventHandler = createUseGridApiEventHandler(registryContainer);\nconst optionsSubscriberOptions = {\n  isFirst: true\n};\nexport function useGridApiOptionHandler(apiRef, eventName, handler) {\n  // Validate that only one per event name?\n  useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);\n}\nexport { GridSignature };","map":{"version":3,"names":["React","TimerBasedCleanupTracking","FinalizationRegistryBasedCleanupTracking","GridSignature","ObjectToBeRetainedByReact","createUseGridApiEventHandler","registryContainer","cleanupTokensCounter","useGridApiEventHandler","apiRef","eventName","handler","options","registry","FinalizationRegistry","objectRetainedByReact","useState","subscription","useRef","handlerRef","current","cleanupTokenRef","enhancedHandler","params","event","details","defaultMuiPrevented","_handlerRef$current","call","subscribeEvent","cleanupToken","register","_subscription$current","unregister","useEffect","_handlerRef$current2","_subscription$current2","unstable_resetCleanupTracking","_registryContainer$re","reset","optionsSubscriberOptions","isFirst","useGridApiOptionHandler"],"sources":["/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js"],"sourcesContent":["import * as React from 'react';\nimport { TimerBasedCleanupTracking } from '../../utils/cleanupTracking/TimerBasedCleanupTracking';\nimport { FinalizationRegistryBasedCleanupTracking } from '../../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking';\n\n/**\n * Signal to the underlying logic what version of the public component API\n * of the data grid is exposed.\n */\nvar GridSignature;\n\n(function (GridSignature) {\n  GridSignature[\"DataGrid\"] = \"DataGrid\";\n  GridSignature[\"DataGridPro\"] = \"DataGridPro\";\n})(GridSignature || (GridSignature = {}));\n\n// We use class to make it easier to detect in heap snapshots by name\nclass ObjectToBeRetainedByReact {} // Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\n\n\nexport function createUseGridApiEventHandler(registryContainer) {\n  let cleanupTokensCounter = 0;\n  return function useGridApiEventHandler(apiRef, eventName, handler, options) {\n    if (registryContainer.registry === null) {\n      registryContainer.registry = typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();\n    }\n\n    const [objectRetainedByReact] = React.useState(new ObjectToBeRetainedByReact());\n    const subscription = React.useRef(null);\n    const handlerRef = React.useRef();\n    handlerRef.current = handler;\n    const cleanupTokenRef = React.useRef(null);\n\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event, details) => {\n        if (!event.defaultMuiPrevented) {\n          var _handlerRef$current;\n\n          (_handlerRef$current = handlerRef.current) == null ? void 0 : _handlerRef$current.call(handlerRef, params, event, details);\n        }\n      };\n\n      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      cleanupTokensCounter += 1;\n      cleanupTokenRef.current = {\n        cleanupToken: cleanupTokensCounter\n      };\n      registryContainer.registry.register(objectRetainedByReact, // The callback below will be called once this reference stops being retained\n      () => {\n        var _subscription$current;\n\n        (_subscription$current = subscription.current) == null ? void 0 : _subscription$current.call(subscription);\n        subscription.current = null;\n        cleanupTokenRef.current = null;\n      }, cleanupTokenRef.current);\n    } else if (!handlerRef.current && subscription.current) {\n      subscription.current();\n      subscription.current = null;\n\n      if (cleanupTokenRef.current) {\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n    }\n\n    React.useEffect(() => {\n      if (!subscription.current && handlerRef.current) {\n        const enhancedHandler = (params, event, details) => {\n          if (!event.defaultMuiPrevented) {\n            var _handlerRef$current2;\n\n            (_handlerRef$current2 = handlerRef.current) == null ? void 0 : _handlerRef$current2.call(handlerRef, params, event, details);\n          }\n        };\n\n        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n      }\n\n      if (cleanupTokenRef.current && registryContainer.registry) {\n        // If the effect was called, it means that this render was committed\n        // so we can trust the cleanup function to remove the listener.\n        registryContainer.registry.unregister(cleanupTokenRef.current);\n        cleanupTokenRef.current = null;\n      }\n\n      return () => {\n        var _subscription$current2;\n\n        (_subscription$current2 = subscription.current) == null ? void 0 : _subscription$current2.call(subscription);\n        subscription.current = null;\n      };\n    }, [apiRef, eventName, options]);\n  };\n}\nconst registryContainer = {\n  registry: null\n}; // TODO: move to @mui/x-data-grid/internals\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport const unstable_resetCleanupTracking = () => {\n  var _registryContainer$re;\n\n  (_registryContainer$re = registryContainer.registry) == null ? void 0 : _registryContainer$re.reset();\n  registryContainer.registry = null;\n};\nexport const useGridApiEventHandler = createUseGridApiEventHandler(registryContainer);\nconst optionsSubscriberOptions = {\n  isFirst: true\n};\nexport function useGridApiOptionHandler(apiRef, eventName, handler) {\n  // Validate that only one per event name?\n  useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);\n}\nexport { GridSignature };"],"mappings":"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"},"metadata":{},"sourceType":"module"}