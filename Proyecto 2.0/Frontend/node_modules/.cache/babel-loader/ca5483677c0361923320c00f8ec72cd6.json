{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { defaultMemoize } from 'reselect';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { getFirstColumnIndexToRender } from '../columns/gridColumnsUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { getRenderableIndexes } from '../virtualization/useGridVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction isUIEvent(event) {\n  return !!event.target;\n}\n\nexport const useGridColumnHeaders = props => {\n  const {\n    innerRef: innerRefProp,\n    minColumnIndex = 0\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  const rootProps = useGridRootProps();\n  const innerRef = React.useRef(null);\n  const handleInnerRef = useForkRef(innerRefProp, innerRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const prevScrollLeft = React.useRef(0);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll\n\n  const getFirstColumnIndexToRenderRef = React.useRef(defaultMemoize(getFirstColumnIndexToRender, {\n    equalityCheck: (a, b) => ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(key => a[key] === b[key])\n  }));\n  const updateInnerPosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex,\n      columnBuffer: rootProps.columnBuffer,\n      firstRowToRender,\n      lastRowToRender,\n      apiRef,\n      visibleRows: currentPage.rows\n    });\n    const offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = `translate3d(${-offset}px, 0px, 0px)`;\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateInnerPosition(renderContext);\n    }\n  }, [renderContext, updateInnerPosition]);\n  const handleScroll = React.useCallback((_ref, event) => {\n    let {\n      left,\n      renderContext: nextRenderContext = null\n    } = _ref;\n\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n\n    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been\n    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.\n\n    let canUpdateInnerPosition = false;\n\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects\n      if (isUIEvent(event)) {\n        // To prevent flickering, the inner position can only be updated after the new context has\n        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before\n        // updating the position.\n        ReactDOM.flushSync(() => {\n          setRenderContext(nextRenderContext);\n        });\n        canUpdateInnerPosition = true;\n      } else {\n        setRenderContext(nextRenderContext);\n      }\n\n      prevRenderContext.current = nextRenderContext;\n    } else {\n      canUpdateInnerPosition = true;\n    } // Pass directly the render context to avoid waiting for the next render\n\n\n    if (nextRenderContext && canUpdateInnerPosition) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll);\n\n  const getColumns = function (params) {\n    let other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      renderContext: nextRenderContext = renderContext,\n      minFirstColumn = minColumnIndex,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n\n    if (!nextRenderContext) {\n      return null;\n    }\n\n    const columns = [];\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minFirstColumn,\n      columnBuffer: rootProps.columnBuffer,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const column = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      const tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      const open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === visibleColumns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), column.field));\n    }\n\n    return columns;\n  };\n\n  const rootStyle = {\n    minHeight: headerHeight,\n    maxHeight: headerHeight,\n    lineHeight: `${headerHeight}px`\n  };\n  return {\n    renderContext,\n    getColumns,\n    isDragging: !!dragCol,\n    getRootProps: function () {\n      let other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        style: rootStyle\n      }, other);\n    },\n    getInnerProps: () => ({\n      ref: handleInnerRef,\n      'aria-rowindex': 1,\n      role: 'row'\n    })\n  };\n};","map":{"version":3,"names":["_extends","React","ReactDOM","useForkRef","defaultMemoize","useGridApiContext","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","gridTabIndexColumnHeaderSelector","gridTabIndexCellSelector","gridFocusColumnHeaderSelector","gridDensityHeaderHeightSelector","gridFilterActiveItemsLookupSelector","gridSortColumnLookupSelector","gridColumnMenuSelector","useGridRootProps","useGridApiEventHandler","GridColumnHeaderItem","getFirstColumnIndexToRender","useGridVisibleRows","getRenderableIndexes","jsx","_jsx","isUIEvent","event","target","useGridColumnHeaders","props","innerRef","innerRefProp","minColumnIndex","dragCol","setDragCol","useState","resizeCol","setResizeCol","apiRef","visibleColumns","columnPositions","tabIndexState","cellTabIndexState","columnHeaderFocus","headerHeight","filterColumnLookup","sortColumnLookup","columnMenuState","rootProps","useRef","handleInnerRef","renderContext","setRenderContext","prevRenderContext","prevScrollLeft","currentPage","useEffect","current","columnHeadersContainerElementRef","scrollLeft","getFirstColumnIndexToRenderRef","equalityCheck","a","b","every","key","updateInnerPosition","useCallback","nextRenderContext","firstRowToRender","lastRowToRender","firstIndex","firstRowIndex","lastIndex","lastRowIndex","minFirstIndex","maxLastIndex","rows","length","buffer","rowBuffer","firstColumnToRender","firstColumnIndex","columnBuffer","visibleRows","offset","style","transform","useLayoutEffect","handleScroll","left","_prevRenderContext$cu","_prevRenderContext$cu2","lastColumnIndex","canUpdateInnerPosition","flushSync","handleColumnResizeStart","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","getColumns","other","minFirstColumn","maxLastColumn","columns","lastColumnToRender","Math","min","renderedColumns","slice","i","column","columnIndex","isFirstColumn","hasTabbableElement","tabIndex","hasFocus","open","push","columnMenuOpen","filterItemsCounter","isDragging","colIndex","isResizing","isLastColumn","extendRowFullWidth","disableExtendRowFullWidth","rootStyle","minHeight","maxHeight","lineHeight","getRootProps","getInnerProps","ref","role"],"sources":["/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useForkRef } from '@mui/material/utils';\nimport { defaultMemoize } from 'reselect';\nimport { useGridApiContext } from '../../utils/useGridApiContext';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridTabIndexColumnHeaderSelector, gridTabIndexCellSelector, gridFocusColumnHeaderSelector } from '../focus/gridFocusStateSelector';\nimport { gridDensityHeaderHeightSelector } from '../density/densitySelector';\nimport { gridFilterActiveItemsLookupSelector } from '../filter/gridFilterSelector';\nimport { gridSortColumnLookupSelector } from '../sorting/gridSortingSelector';\nimport { gridColumnMenuSelector } from '../columnMenu/columnMenuSelector';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridColumnHeaderItem } from '../../../components/columnHeaders/GridColumnHeaderItem';\nimport { getFirstColumnIndexToRender } from '../columns/gridColumnsUtils';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { getRenderableIndexes } from '../virtualization/useGridVirtualScroller';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction isUIEvent(event) {\n  return !!event.target;\n}\n\nexport const useGridColumnHeaders = props => {\n  const {\n    innerRef: innerRefProp,\n    minColumnIndex = 0\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridApiContext();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);\n  const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n  const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);\n  const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);\n  const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);\n  const rootProps = useGridRootProps();\n  const innerRef = React.useRef(null);\n  const handleInnerRef = useForkRef(innerRefProp, innerRef);\n  const [renderContext, setRenderContext] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const prevScrollLeft = React.useRef(0);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  React.useEffect(() => {\n    apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;\n  }, [apiRef]); // memoize `getFirstColumnIndexToRender`, since it's called on scroll\n\n  const getFirstColumnIndexToRenderRef = React.useRef(defaultMemoize(getFirstColumnIndexToRender, {\n    equalityCheck: (a, b) => ['firstColumnIndex', 'minColumnIndex', 'columnBuffer'].every(key => a[key] === b[key])\n  }));\n  const updateInnerPosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex,\n      columnBuffer: rootProps.columnBuffer,\n      firstRowToRender,\n      lastRowToRender,\n      apiRef,\n      visibleRows: currentPage.rows\n    });\n    const offset = firstColumnToRender > 0 ? prevScrollLeft.current - columnPositions[firstColumnToRender] : prevScrollLeft.current;\n    innerRef.current.style.transform = `translate3d(${-offset}px, 0px, 0px)`;\n  }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer]);\n  React.useLayoutEffect(() => {\n    if (renderContext) {\n      updateInnerPosition(renderContext);\n    }\n  }, [renderContext, updateInnerPosition]);\n  const handleScroll = React.useCallback(({\n    left,\n    renderContext: nextRenderContext = null\n  }, event) => {\n    var _prevRenderContext$cu, _prevRenderContext$cu2;\n\n    if (!innerRef.current) {\n      return;\n    } // Ignore vertical scroll.\n    // Excepts the first event which sets the previous render context.\n\n\n    if (prevScrollLeft.current === left && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {\n      return;\n    }\n\n    prevScrollLeft.current = left; // We can only update the position when we guarantee that the render context has been\n    // rendered. This is achieved using ReactDOM.flushSync or when the context doesn't change.\n\n    let canUpdateInnerPosition = false;\n\n    if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {\n      // ReactDOM.flushSync cannot be called on `scroll` events fired inside effects\n      if (isUIEvent(event)) {\n        // To prevent flickering, the inner position can only be updated after the new context has\n        // been rendered. ReactDOM.flushSync ensures that the state changes will happen before\n        // updating the position.\n        ReactDOM.flushSync(() => {\n          setRenderContext(nextRenderContext);\n        });\n        canUpdateInnerPosition = true;\n      } else {\n        setRenderContext(nextRenderContext);\n      }\n\n      prevRenderContext.current = nextRenderContext;\n    } else {\n      canUpdateInnerPosition = true;\n    } // Pass directly the render context to avoid waiting for the next render\n\n\n    if (nextRenderContext && canUpdateInnerPosition) {\n      updateInnerPosition(nextRenderContext);\n    }\n  }, [updateInnerPosition]);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  useGridApiEventHandler(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridApiEventHandler(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridApiEventHandler(apiRef, 'columnHeaderDragEnd', handleColumnReorderStop);\n  useGridApiEventHandler(apiRef, 'rowsScroll', handleScroll);\n\n  const getColumns = (params, other = {}) => {\n    const {\n      renderContext: nextRenderContext = renderContext,\n      minFirstColumn = minColumnIndex,\n      maxLastColumn = visibleColumns.length\n    } = params || {};\n\n    if (!nextRenderContext) {\n      return null;\n    }\n\n    const columns = [];\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const firstColumnToRender = getFirstColumnIndexToRenderRef.current({\n      firstColumnIndex: nextRenderContext.firstColumnIndex,\n      minColumnIndex: minFirstColumn,\n      columnBuffer: rootProps.columnBuffer,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const lastColumnToRender = Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const column = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const hasTabbableElement = !(tabIndexState === null && cellTabIndexState === null);\n      const tabIndex = tabIndexState !== null && tabIndexState.field === column.field || isFirstColumn && !hasTabbableElement ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === column.field;\n      const open = columnMenuState.open && columnMenuState.field === column.field;\n      columns.push( /*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[column.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[column.field] && filterColumnLookup[column.field].length,\n        headerHeight: headerHeight,\n        isDragging: column.field === dragCol,\n        column: column,\n        colIndex: columnIndex,\n        isResizing: resizeCol === column.field,\n        isLastColumn: columnIndex === visibleColumns.length - 1,\n        extendRowFullWidth: !rootProps.disableExtendRowFullWidth,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex\n      }, other), column.field));\n    }\n\n    return columns;\n  };\n\n  const rootStyle = {\n    minHeight: headerHeight,\n    maxHeight: headerHeight,\n    lineHeight: `${headerHeight}px`\n  };\n  return {\n    renderContext,\n    getColumns,\n    isDragging: !!dragCol,\n    getRootProps: (other = {}) => _extends({\n      style: rootStyle\n    }, other),\n    getInnerProps: () => ({\n      ref: handleInnerRef,\n      'aria-rowindex': 1,\n      role: 'row'\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}