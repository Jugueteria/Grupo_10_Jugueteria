{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/jonavq/Downloads/Proyecto 2.0/Frontend/node_modules/@babel/runtime/regenerator/index.js\");\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) : typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) : (global = global || self, factory(global.ReactTable = {}, global.React));\n})(this, function (exports, React) {\n  'use strict';\n\n  React = React && Object.prototype.hasOwnProperty.call(React, 'default') ? React['default'] : React;\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n      var info = gen[key](arg);\n      var value = info.value;\n    } catch (error) {\n      reject(error);\n      return;\n    }\n\n    if (info.done) {\n      resolve(value);\n    } else {\n      Promise.resolve(value).then(_next, _throw);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var self = this,\n          args = arguments;\n      return new Promise(function (resolve, reject) {\n        var gen = fn.apply(self, args);\n\n        function _next(value) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n        }\n\n        function _throw(err) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n        }\n\n        _next(undefined);\n      });\n    };\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || \"default\");\n      if (typeof res !== \"object\") return res;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n\n    return (hint === \"string\" ? String : Number)(input);\n  }\n\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n\n    return typeof key === \"symbol\" ? key : String(key);\n  }\n\n  var renderErr = 'Renderer Error ☝️';\n  var actions = {\n    init: 'init'\n  };\n\n  var defaultRenderer = function defaultRenderer(_ref) {\n    var _ref$value = _ref.value,\n        value = _ref$value === void 0 ? '' : _ref$value;\n    return value;\n  };\n\n  var emptyRenderer = function emptyRenderer() {\n    return React.createElement(React.Fragment, null, \"\\xA0\");\n  };\n\n  var defaultColumn = {\n    Cell: defaultRenderer,\n    width: 150,\n    minWidth: 0,\n    maxWidth: Number.MAX_SAFE_INTEGER\n  };\n\n  function mergeProps() {\n    for (var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++) {\n      propList[_key] = arguments[_key];\n    }\n\n    return propList.reduce(function (props, next) {\n      var style = next.style,\n          className = next.className,\n          rest = _objectWithoutPropertiesLoose(next, [\"style\", \"className\"]);\n\n      props = _extends({}, props, {}, rest);\n\n      if (style) {\n        props.style = props.style ? _extends({}, props.style || {}, {}, style || {}) : style;\n      }\n\n      if (className) {\n        props.className = props.className ? props.className + ' ' + className : className;\n      }\n\n      if (props.className === '') {\n        delete props.className;\n      }\n\n      return props;\n    }, {});\n  }\n\n  function handlePropGetter(prevProps, userProps, meta) {\n    // Handle a lambda, pass it the previous props\n    if (typeof userProps === 'function') {\n      return handlePropGetter({}, userProps(prevProps, meta));\n    } // Handle an array, merge each item as separate props\n\n\n    if (Array.isArray(userProps)) {\n      return mergeProps.apply(void 0, [prevProps].concat(userProps));\n    } // Handle an object by default, merge the two objects\n\n\n    return mergeProps(prevProps, userProps);\n  }\n\n  var makePropGetter = function makePropGetter(hooks, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return function (userProps) {\n      if (userProps === void 0) {\n        userProps = {};\n      }\n\n      return [].concat(hooks, [userProps]).reduce(function (prev, next) {\n        return handlePropGetter(prev, next, _extends({}, meta, {\n          userProps: userProps\n        }));\n      }, {});\n    };\n  };\n\n  var reduceHooks = function reduceHooks(hooks, initial, meta, allowUndefined) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return hooks.reduce(function (prev, next) {\n      var nextValue = next(prev, meta);\n      {\n        if (!allowUndefined && typeof nextValue === 'undefined') {\n          console.info(next);\n          throw new Error('React Table: A reducer hook ☝️ just returned undefined! This is not allowed.');\n        }\n      }\n      return nextValue;\n    }, initial);\n  };\n\n  var loopHooks = function loopHooks(hooks, context, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return hooks.forEach(function (hook) {\n      var nextValue = hook(context, meta);\n      {\n        if (typeof nextValue !== 'undefined') {\n          console.info(hook, nextValue);\n          throw new Error('React Table: A loop-type hook ☝️ just returned a value! This is not allowed.');\n        }\n      }\n    });\n  };\n\n  function ensurePluginOrder(plugins, befores, pluginName, afters) {\n    if (afters) {\n      throw new Error(\"Defining plugins in the \\\"after\\\" section of ensurePluginOrder is no longer supported (see plugin \" + pluginName + \")\");\n    }\n\n    var pluginIndex = plugins.findIndex(function (plugin) {\n      return plugin.pluginName === pluginName;\n    });\n\n    if (pluginIndex === -1) {\n      {\n        throw new Error(\"The plugin \\\"\" + pluginName + \"\\\" was not found in the plugin list!\\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\\n\\n  \" + pluginName + \".pluginName = '\" + pluginName + \"'\\n\");\n      }\n    }\n\n    befores.forEach(function (before) {\n      var beforeIndex = plugins.findIndex(function (plugin) {\n        return plugin.pluginName === before;\n      });\n\n      if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n        {\n          throw new Error(\"React Table: The \" + pluginName + \" plugin hook must be placed after the \" + before + \" plugin hook!\");\n        }\n      }\n    });\n  }\n\n  function functionalUpdate(updater, old) {\n    return typeof updater === 'function' ? updater(old) : updater;\n  }\n\n  function useGetLatest(obj) {\n    var ref = React.useRef();\n    ref.current = obj;\n    return React.useCallback(function () {\n      return ref.current;\n    }, []);\n  } // SSR has issues with useLayoutEffect still, so use useEffect during SSR\n\n\n  var safeUseLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n  function useMountedLayoutEffect(fn, deps) {\n    var mountedRef = React.useRef(false);\n    safeUseLayoutEffect(function () {\n      if (mountedRef.current) {\n        fn();\n      }\n\n      mountedRef.current = true; // eslint-disable-next-line\n    }, deps);\n  }\n\n  function useAsyncDebounce(defaultFn, defaultWait) {\n    if (defaultWait === void 0) {\n      defaultWait = 0;\n    }\n\n    var debounceRef = React.useRef({});\n    var getDefaultFn = useGetLatest(defaultFn);\n    var getDefaultWait = useGetLatest(defaultWait);\n    return React.useCallback( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _len2,\n            args,\n            _key2,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                  args[_key2] = _args2[_key2];\n                }\n\n                if (!debounceRef.current.promise) {\n                  debounceRef.current.promise = new Promise(function (resolve, reject) {\n                    debounceRef.current.resolve = resolve;\n                    debounceRef.current.reject = reject;\n                  });\n                }\n\n                if (debounceRef.current.timeout) {\n                  clearTimeout(debounceRef.current.timeout);\n                }\n\n                debounceRef.current.timeout = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          delete debounceRef.current.timeout;\n                          _context.prev = 1;\n                          _context.t0 = debounceRef.current;\n                          _context.next = 5;\n                          return getDefaultFn().apply(void 0, args);\n\n                        case 5:\n                          _context.t1 = _context.sent;\n\n                          _context.t0.resolve.call(_context.t0, _context.t1);\n\n                          _context.next = 12;\n                          break;\n\n                        case 9:\n                          _context.prev = 9;\n                          _context.t2 = _context[\"catch\"](1);\n                          debounceRef.current.reject(_context.t2);\n\n                        case 12:\n                          _context.prev = 12;\n                          delete debounceRef.current.promise;\n                          return _context.finish(12);\n\n                        case 15:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[1, 9, 12, 15]]);\n                })), getDefaultWait());\n                return _context2.abrupt(\"return\", debounceRef.current.promise);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function () {\n        return _ref2.apply(this, arguments);\n      };\n    }(), [getDefaultFn, getDefaultWait]);\n  }\n\n  function makeRenderer(instance, column, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return function (type, userProps) {\n      if (userProps === void 0) {\n        userProps = {};\n      }\n\n      var Comp = typeof type === 'string' ? column[type] : type;\n\n      if (typeof Comp === 'undefined') {\n        console.info(column);\n        throw new Error(renderErr);\n      }\n\n      return flexRender(Comp, _extends({}, instance, {\n        column: column\n      }, meta, {}, userProps));\n    };\n  }\n\n  function flexRender(Comp, props) {\n    return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;\n  }\n\n  function isReactComponent(component) {\n    return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n  }\n\n  function isClassComponent(component) {\n    return typeof component === 'function' && function () {\n      var proto = Object.getPrototypeOf(component);\n      return proto.prototype && proto.prototype.isReactComponent;\n    }();\n  }\n\n  function isExoticComponent(component) {\n    return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n  }\n\n  function linkColumnStructure(columns, parent, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n\n    return columns.map(function (column) {\n      column = _extends({}, column, {\n        parent: parent,\n        depth: depth\n      });\n      assignColumnAccessor(column);\n\n      if (column.columns) {\n        column.columns = linkColumnStructure(column.columns, column, depth + 1);\n      }\n\n      return column;\n    });\n  }\n\n  function flattenColumns(columns) {\n    return flattenBy(columns, 'columns');\n  }\n\n  function assignColumnAccessor(column) {\n    // First check for string accessor\n    var id = column.id,\n        accessor = column.accessor,\n        Header = column.Header;\n\n    if (typeof accessor === 'string') {\n      id = id || accessor;\n      var accessorPath = accessor.split('.');\n\n      accessor = function accessor(row) {\n        return getBy(row, accessorPath);\n      };\n    }\n\n    if (!id && typeof Header === 'string' && Header) {\n      id = Header;\n    }\n\n    if (!id && column.columns) {\n      console.error(column);\n      throw new Error('A column ID (or unique \"Header\" value) is required!');\n    }\n\n    if (!id) {\n      console.error(column);\n      throw new Error('A column ID (or string accessor) is required!');\n    }\n\n    Object.assign(column, {\n      id: id,\n      accessor: accessor\n    });\n    return column;\n  }\n\n  function decorateColumn(column, userDefaultColumn) {\n    if (!userDefaultColumn) {\n      throw new Error();\n    }\n\n    Object.assign(column, _extends({\n      // Make sure there is a fallback header, just in case\n      Header: emptyRenderer,\n      Footer: emptyRenderer\n    }, defaultColumn, {}, userDefaultColumn, {}, column));\n    Object.assign(column, {\n      originalWidth: column.width\n    });\n    return column;\n  } // Build the header groups from the bottom up\n\n\n  function makeHeaderGroups(allColumns, defaultColumn, additionalHeaderProperties) {\n    if (additionalHeaderProperties === void 0) {\n      additionalHeaderProperties = function additionalHeaderProperties() {\n        return {};\n      };\n    }\n\n    var headerGroups = [];\n    var scanColumns = allColumns;\n    var uid = 0;\n\n    var getUID = function getUID() {\n      return uid++;\n    };\n\n    var _loop = function _loop() {\n      // The header group we are creating\n      var headerGroup = {\n        headers: []\n      }; // The parent columns we're going to scan next\n\n      var parentColumns = [];\n      var hasParents = scanColumns.some(function (d) {\n        return d.parent;\n      }); // Scan each column for parents\n\n      scanColumns.forEach(function (column) {\n        // What is the latest (last) parent column?\n        var latestParentColumn = [].concat(parentColumns).reverse()[0];\n        var newParent;\n\n        if (hasParents) {\n          // If the column has a parent, add it if necessary\n          if (column.parent) {\n            newParent = _extends({}, column.parent, {\n              originalId: column.parent.id,\n              id: column.parent.id + \"_\" + getUID(),\n              headers: [column]\n            }, additionalHeaderProperties(column));\n          } else {\n            // If other columns have parents, we'll need to add a place holder if necessary\n            var originalId = column.id + \"_placeholder\";\n            newParent = decorateColumn(_extends({\n              originalId: originalId,\n              id: column.id + \"_placeholder_\" + getUID(),\n              placeholderOf: column,\n              headers: [column]\n            }, additionalHeaderProperties(column)), defaultColumn);\n          } // If the resulting parent columns are the same, just add\n          // the column and increment the header span\n\n\n          if (latestParentColumn && latestParentColumn.originalId === newParent.originalId) {\n            latestParentColumn.headers.push(column);\n          } else {\n            parentColumns.push(newParent);\n          }\n        }\n\n        headerGroup.headers.push(column);\n      });\n      headerGroups.push(headerGroup); // Start scanning the parent columns\n\n      scanColumns = parentColumns;\n    };\n\n    while (scanColumns.length) {\n      _loop();\n    }\n\n    return headerGroups.reverse();\n  }\n\n  var pathObjCache = new Map();\n\n  function getBy(obj, path, def) {\n    if (!path) {\n      return obj;\n    }\n\n    var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);\n\n    var pathObj = pathObjCache.get(cacheKey) || function () {\n      var pathObj = makePathArray(path);\n      pathObjCache.set(cacheKey, pathObj);\n      return pathObj;\n    }();\n\n    var val;\n\n    try {\n      val = pathObj.reduce(function (cursor, pathPart) {\n        return cursor[pathPart];\n      }, obj);\n    } catch (e) {// continue regardless of error\n    }\n\n    return typeof val !== 'undefined' ? val : def;\n  }\n\n  function getFirstDefined() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    for (var i = 0; i < args.length; i += 1) {\n      if (typeof args[i] !== 'undefined') {\n        return args[i];\n      }\n    }\n  }\n\n  function isFunction(a) {\n    if (typeof a === 'function') {\n      return a;\n    }\n  }\n\n  function flattenBy(arr, key) {\n    var flat = [];\n\n    var recurse = function recurse(arr) {\n      arr.forEach(function (d) {\n        if (!d[key]) {\n          flat.push(d);\n        } else {\n          recurse(d[key]);\n        }\n      });\n    };\n\n    recurse(arr);\n    return flat;\n  }\n\n  function expandRows(rows, _ref) {\n    var manualExpandedKey = _ref.manualExpandedKey,\n        expanded = _ref.expanded,\n        _ref$expandSubRows = _ref.expandSubRows,\n        expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;\n    var expandedRows = [];\n\n    var handleRow = function handleRow(row, addToExpandedRows) {\n      if (addToExpandedRows === void 0) {\n        addToExpandedRows = true;\n      }\n\n      row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];\n      row.canExpand = row.subRows && !!row.subRows.length;\n\n      if (addToExpandedRows) {\n        expandedRows.push(row);\n      }\n\n      if (row.subRows && row.subRows.length && row.isExpanded) {\n        row.subRows.forEach(function (row) {\n          return handleRow(row, expandSubRows);\n        });\n      }\n    };\n\n    rows.forEach(function (row) {\n      return handleRow(row);\n    });\n    return expandedRows;\n  }\n\n  function getFilterMethod(filter, userFilterTypes, filterTypes) {\n    return isFunction(filter) || userFilterTypes[filter] || filterTypes[filter] || filterTypes.text;\n  }\n\n  function shouldAutoRemoveFilter(autoRemove, value, column) {\n    return autoRemove ? autoRemove(value, column) : typeof value === 'undefined';\n  }\n\n  function unpreparedAccessWarning() {\n    throw new Error('React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.');\n  }\n\n  var passiveSupported = null;\n\n  function passiveEventSupported() {\n    // memoize support to avoid adding multiple test events\n    if (typeof passiveSupported === 'boolean') return passiveSupported;\n    var supported = false;\n\n    try {\n      var options = {\n        get passive() {\n          supported = true;\n          return false;\n        }\n\n      };\n      window.addEventListener('test', null, options);\n      window.removeEventListener('test', null, options);\n    } catch (err) {\n      supported = false;\n    }\n\n    passiveSupported = supported;\n    return passiveSupported;\n  } //\n\n\n  var reOpenBracket = /\\[/g;\n  var reCloseBracket = /\\]/g;\n\n  function makePathArray(obj) {\n    return flattenDeep(obj) // remove all periods in parts\n    .map(function (d) {\n      return String(d).replace('.', '_');\n    }) // join parts using period\n    .join('.') // replace brackets with periods\n    .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods\n    .split('.');\n  }\n\n  function flattenDeep(arr, newArr) {\n    if (newArr === void 0) {\n      newArr = [];\n    }\n\n    if (!Array.isArray(arr)) {\n      newArr.push(arr);\n    } else {\n      for (var i = 0; i < arr.length; i += 1) {\n        flattenDeep(arr[i], newArr);\n      }\n    }\n\n    return newArr;\n  }\n\n  var defaultGetTableProps = function defaultGetTableProps(props) {\n    return _extends({\n      role: 'table'\n    }, props);\n  };\n\n  var defaultGetTableBodyProps = function defaultGetTableBodyProps(props) {\n    return _extends({\n      role: 'rowgroup'\n    }, props);\n  };\n\n  var defaultGetHeaderProps = function defaultGetHeaderProps(props, _ref) {\n    var column = _ref.column;\n    return _extends({\n      key: \"header_\" + column.id,\n      colSpan: column.totalVisibleHeaderCount,\n      role: 'columnheader'\n    }, props);\n  };\n\n  var defaultGetFooterProps = function defaultGetFooterProps(props, _ref2) {\n    var column = _ref2.column;\n    return _extends({\n      key: \"footer_\" + column.id,\n      colSpan: column.totalVisibleHeaderCount\n    }, props);\n  };\n\n  var defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps(props, _ref3) {\n    var index = _ref3.index;\n    return _extends({\n      key: \"headerGroup_\" + index,\n      role: 'row'\n    }, props);\n  };\n\n  var defaultGetFooterGroupProps = function defaultGetFooterGroupProps(props, _ref4) {\n    var index = _ref4.index;\n    return _extends({\n      key: \"footerGroup_\" + index\n    }, props);\n  };\n\n  var defaultGetRowProps = function defaultGetRowProps(props, _ref5) {\n    var row = _ref5.row;\n    return _extends({\n      key: \"row_\" + row.id,\n      role: 'row'\n    }, props);\n  };\n\n  var defaultGetCellProps = function defaultGetCellProps(props, _ref6) {\n    var cell = _ref6.cell;\n    return _extends({\n      key: \"cell_\" + cell.row.id + \"_\" + cell.column.id,\n      role: 'cell'\n    }, props);\n  };\n\n  function makeDefaultPluginHooks() {\n    return {\n      useOptions: [],\n      stateReducers: [],\n      useControlledState: [],\n      columns: [],\n      columnsDeps: [],\n      allColumns: [],\n      allColumnsDeps: [],\n      accessValue: [],\n      materializedColumns: [],\n      materializedColumnsDeps: [],\n      useInstanceAfterData: [],\n      visibleColumns: [],\n      visibleColumnsDeps: [],\n      headerGroups: [],\n      headerGroupsDeps: [],\n      useInstanceBeforeDimensions: [],\n      useInstance: [],\n      prepareRow: [],\n      getTableProps: [defaultGetTableProps],\n      getTableBodyProps: [defaultGetTableBodyProps],\n      getHeaderGroupProps: [defaultGetHeaderGroupProps],\n      getFooterGroupProps: [defaultGetFooterGroupProps],\n      getHeaderProps: [defaultGetHeaderProps],\n      getFooterProps: [defaultGetFooterProps],\n      getRowProps: [defaultGetRowProps],\n      getCellProps: [defaultGetCellProps],\n      useFinalInstance: []\n    };\n  }\n\n  actions.resetHiddenColumns = 'resetHiddenColumns';\n  actions.toggleHideColumn = 'toggleHideColumn';\n  actions.setHiddenColumns = 'setHiddenColumns';\n  actions.toggleHideAllColumns = 'toggleHideAllColumns';\n\n  var useColumnVisibility = function useColumnVisibility(hooks) {\n    hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];\n    hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];\n    hooks.stateReducers.push(reducer);\n    hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);\n    hooks.headerGroupsDeps.push(function (deps, _ref) {\n      var instance = _ref.instance;\n      return [].concat(deps, [instance.state.hiddenColumns]);\n    });\n    hooks.useInstance.push(useInstance);\n  };\n\n  useColumnVisibility.pluginName = 'useColumnVisibility';\n\n  var defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps(props, _ref2) {\n    var column = _ref2.column;\n    return [props, {\n      onChange: function onChange(e) {\n        column.toggleHidden(!e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: column.isVisible,\n      title: 'Toggle Column Visible'\n    }];\n  };\n\n  var defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps(props, _ref3) {\n    var instance = _ref3.instance;\n    return [props, {\n      onChange: function onChange(e) {\n        instance.toggleHideAllColumns(!e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n      title: 'Toggle All Columns Hidden',\n      indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length\n    }];\n  };\n\n  function reducer(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        hiddenColumns: []\n      }, state);\n    }\n\n    if (action.type === actions.resetHiddenColumns) {\n      return _extends({}, state, {\n        hiddenColumns: instance.initialState.hiddenColumns || []\n      });\n    }\n\n    if (action.type === actions.toggleHideColumn) {\n      var should = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.includes(action.columnId);\n      var hiddenColumns = should ? [].concat(state.hiddenColumns, [action.columnId]) : state.hiddenColumns.filter(function (d) {\n        return d !== action.columnId;\n      });\n      return _extends({}, state, {\n        hiddenColumns: hiddenColumns\n      });\n    }\n\n    if (action.type === actions.setHiddenColumns) {\n      return _extends({}, state, {\n        hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)\n      });\n    }\n\n    if (action.type === actions.toggleHideAllColumns) {\n      var shouldAll = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.length;\n      return _extends({}, state, {\n        hiddenColumns: shouldAll ? instance.allColumns.map(function (d) {\n          return d.id;\n        }) : []\n      });\n    }\n  }\n\n  function useInstanceBeforeDimensions(instance) {\n    var headers = instance.headers,\n        hiddenColumns = instance.state.hiddenColumns;\n    var isMountedRef = React.useRef(false);\n    if (!isMountedRef.current) ;\n\n    var handleColumn = function handleColumn(column, parentVisible) {\n      column.isVisible = parentVisible && !hiddenColumns.includes(column.id);\n      var totalVisibleHeaderCount = 0;\n\n      if (column.headers && column.headers.length) {\n        column.headers.forEach(function (subColumn) {\n          return totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible);\n        });\n      } else {\n        totalVisibleHeaderCount = column.isVisible ? 1 : 0;\n      }\n\n      column.totalVisibleHeaderCount = totalVisibleHeaderCount;\n      return totalVisibleHeaderCount;\n    };\n\n    var totalVisibleHeaderCount = 0;\n    headers.forEach(function (subHeader) {\n      return totalVisibleHeaderCount += handleColumn(subHeader, true);\n    });\n  }\n\n  function useInstance(instance) {\n    var columns = instance.columns,\n        flatHeaders = instance.flatHeaders,\n        dispatch = instance.dispatch,\n        allColumns = instance.allColumns,\n        getHooks = instance.getHooks,\n        hiddenColumns = instance.state.hiddenColumns,\n        _instance$autoResetHi = instance.autoResetHiddenColumns,\n        autoResetHiddenColumns = _instance$autoResetHi === void 0 ? true : _instance$autoResetHi;\n    var getInstance = useGetLatest(instance);\n    var allColumnsHidden = allColumns.length === hiddenColumns.length;\n    var toggleHideColumn = React.useCallback(function (columnId, value) {\n      return dispatch({\n        type: actions.toggleHideColumn,\n        columnId: columnId,\n        value: value\n      });\n    }, [dispatch]);\n    var setHiddenColumns = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.setHiddenColumns,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleHideAllColumns = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleHideAllColumns,\n        value: value\n      });\n    }, [dispatch]);\n    var getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {\n      instance: getInstance()\n    });\n    flatHeaders.forEach(function (column) {\n      column.toggleHidden = function (value) {\n        dispatch({\n          type: actions.toggleHideColumn,\n          columnId: column.id,\n          value: value\n        });\n      };\n\n      column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {\n        instance: getInstance(),\n        column: column\n      });\n    });\n    var getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetHiddenColumns()) {\n        dispatch({\n          type: actions.resetHiddenColumns\n        });\n      }\n    }, [dispatch, columns]);\n    Object.assign(instance, {\n      allColumnsHidden: allColumnsHidden,\n      toggleHideColumn: toggleHideColumn,\n      setHiddenColumns: setHiddenColumns,\n      toggleHideAllColumns: toggleHideAllColumns,\n      getToggleHideAllColumnsProps: getToggleHideAllColumnsProps\n    });\n  }\n\n  var defaultInitialState = {};\n  var defaultColumnInstance = {};\n\n  var defaultReducer = function defaultReducer(state, action, prevState) {\n    return state;\n  };\n\n  var defaultGetSubRows = function defaultGetSubRows(row, index) {\n    return row.subRows || [];\n  };\n\n  var defaultGetRowId = function defaultGetRowId(row, index, parent) {\n    return \"\" + (parent ? [parent.id, index].join('.') : index);\n  };\n\n  var defaultUseControlledState = function defaultUseControlledState(d) {\n    return d;\n  };\n\n  function applyDefaults(props) {\n    var _props$initialState = props.initialState,\n        initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState,\n        _props$defaultColumn = props.defaultColumn,\n        defaultColumn = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn,\n        _props$getSubRows = props.getSubRows,\n        getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows,\n        _props$getRowId = props.getRowId,\n        getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId,\n        _props$stateReducer = props.stateReducer,\n        stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer,\n        _props$useControlledS = props.useControlledState,\n        useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS,\n        rest = _objectWithoutPropertiesLoose(props, [\"initialState\", \"defaultColumn\", \"getSubRows\", \"getRowId\", \"stateReducer\", \"useControlledState\"]);\n\n    return _extends({}, rest, {\n      initialState: initialState,\n      defaultColumn: defaultColumn,\n      getSubRows: getSubRows,\n      getRowId: getRowId,\n      stateReducer: stateReducer,\n      useControlledState: useControlledState\n    });\n  }\n\n  var useTable = function useTable(props) {\n    for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      plugins[_key - 1] = arguments[_key];\n    } // Apply default props\n\n\n    props = applyDefaults(props); // Add core plugins\n\n    plugins = [useColumnVisibility].concat(plugins); // Create the table instance\n\n    var instanceRef = React.useRef({}); // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n\n    var getInstance = useGetLatest(instanceRef.current); // Assign the props, plugins and hooks to the instance\n\n    Object.assign(getInstance(), _extends({}, props, {\n      plugins: plugins,\n      hooks: makeDefaultPluginHooks()\n    })); // Allow plugins to register hooks as early as possible\n\n    plugins.filter(Boolean).forEach(function (plugin) {\n      plugin(getInstance().hooks);\n    }); // Consume all hooks and make a getter for them\n\n    var getHooks = useGetLatest(getInstance().hooks);\n    getInstance().getHooks = getHooks;\n    delete getInstance().hooks; // Allow useOptions hooks to modify the options coming into the table\n\n    Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));\n\n    var _getInstance = getInstance(),\n        data = _getInstance.data,\n        userColumns = _getInstance.columns,\n        initialState = _getInstance.initialState,\n        defaultColumn = _getInstance.defaultColumn,\n        getSubRows = _getInstance.getSubRows,\n        getRowId = _getInstance.getRowId,\n        stateReducer = _getInstance.stateReducer,\n        useControlledState = _getInstance.useControlledState; // Setup user reducer ref\n\n\n    var getStateReducer = useGetLatest(stateReducer); // Build the reducer\n\n    var reducer = React.useCallback(function (state, action) {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({\n          action: action\n        });\n        throw new Error('Unknown Action 👆');\n      } // Reduce the state from all plugin reducers\n\n\n      return [].concat(getHooks().stateReducers, Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()]).reduce(function (s, handler) {\n        return handler(s, action, state, getInstance()) || s;\n      }, state);\n    }, [getHooks, getStateReducer, getInstance]); // Start the reducer\n\n    var _React$useReducer = React.useReducer(reducer, undefined, function () {\n      return reducer(initialState, {\n        type: actions.init\n      });\n    }),\n        reducerState = _React$useReducer[0],\n        dispatch = _React$useReducer[1]; // Allow the user to control the final state with hooks\n\n\n    var state = reduceHooks([].concat(getHooks().useControlledState, [useControlledState]), reducerState, {\n      instance: getInstance()\n    });\n    Object.assign(getInstance(), {\n      state: state,\n      dispatch: dispatch\n    }); // Decorate All the columns\n\n    var columns = React.useMemo(function () {\n      return linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {\n        instance: getInstance()\n      }));\n    }, [getHooks, getInstance, userColumns].concat(reduceHooks(getHooks().columnsDeps, [], {\n      instance: getInstance()\n    })));\n    getInstance().columns = columns; // Get the flat list of all columns and allow hooks to decorate\n    // those columns (and trigger this memoization via deps)\n\n    var allColumns = React.useMemo(function () {\n      return reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance()\n      }).map(assignColumnAccessor);\n    }, [columns, getHooks, getInstance].concat(reduceHooks(getHooks().allColumnsDeps, [], {\n      instance: getInstance()\n    })));\n    getInstance().allColumns = allColumns; // Access the row model using initial columns\n\n    var _React$useMemo = React.useMemo(function () {\n      var rows = [];\n      var flatRows = [];\n      var rowsById = {};\n      var allColumnsQueue = [].concat(allColumns);\n\n      while (allColumnsQueue.length) {\n        var column = allColumnsQueue.shift();\n        accessRowsForColumn({\n          data: data,\n          rows: rows,\n          flatRows: flatRows,\n          rowsById: rowsById,\n          column: column,\n          getRowId: getRowId,\n          getSubRows: getSubRows,\n          accessValueHooks: getHooks().accessValue,\n          getInstance: getInstance\n        });\n      }\n\n      return [rows, flatRows, rowsById];\n    }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance]),\n        rows = _React$useMemo[0],\n        flatRows = _React$useMemo[1],\n        rowsById = _React$useMemo[2];\n\n    Object.assign(getInstance(), {\n      rows: rows,\n      initialRows: [].concat(rows),\n      flatRows: flatRows,\n      rowsById: rowsById // materializedColumns,\n\n    });\n    loopHooks(getHooks().useInstanceAfterData, getInstance()); // Get the flat list of all columns AFTER the rows\n    // have been access, and allow hooks to decorate\n    // those columns (and trigger this memoization via deps)\n\n    var visibleColumns = React.useMemo(function () {\n      return reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance()\n      }).map(function (d) {\n        return decorateColumn(d, defaultColumn);\n      });\n    }, [getHooks, allColumns, getInstance, defaultColumn].concat(reduceHooks(getHooks().visibleColumnsDeps, [], {\n      instance: getInstance()\n    }))); // Combine new visible columns with all columns\n\n    allColumns = React.useMemo(function () {\n      var columns = [].concat(visibleColumns);\n      allColumns.forEach(function (column) {\n        if (!columns.find(function (d) {\n          return d.id === column.id;\n        })) {\n          columns.push(column);\n        }\n      });\n      return columns;\n    }, [allColumns, visibleColumns]);\n    getInstance().allColumns = allColumns;\n    {\n      var duplicateColumns = allColumns.filter(function (column, i) {\n        return allColumns.findIndex(function (d) {\n          return d.id === column.id;\n        }) !== i;\n      });\n\n      if (duplicateColumns.length) {\n        console.info(allColumns);\n        throw new Error(\"Duplicate columns were found with ids: \\\"\" + duplicateColumns.map(function (d) {\n          return d.id;\n        }).join(', ') + \"\\\" in the columns array above\");\n      }\n    } // Make the headerGroups\n\n    var headerGroups = React.useMemo(function () {\n      return reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns, defaultColumn), getInstance());\n    }, [getHooks, visibleColumns, defaultColumn, getInstance].concat(reduceHooks(getHooks().headerGroupsDeps, [], {\n      instance: getInstance()\n    })));\n    getInstance().headerGroups = headerGroups; // Get the first level of headers\n\n    var headers = React.useMemo(function () {\n      return headerGroups.length ? headerGroups[0].headers : [];\n    }, [headerGroups]);\n    getInstance().headers = headers; // Provide a flat header list for utilities\n\n    getInstance().flatHeaders = headerGroups.reduce(function (all, headerGroup) {\n      return [].concat(all, headerGroup.headers);\n    }, []);\n    loopHooks(getHooks().useInstanceBeforeDimensions, getInstance()); // Filter columns down to visible ones\n\n    var visibleColumnsDep = visibleColumns.filter(function (d) {\n      return d.isVisible;\n    }).map(function (d) {\n      return d.id;\n    }).sort().join('_');\n    visibleColumns = React.useMemo(function () {\n      return visibleColumns.filter(function (d) {\n        return d.isVisible;\n      });\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]);\n    getInstance().visibleColumns = visibleColumns; // Header Visibility is needed by this point\n\n    var _calculateHeaderWidth = calculateHeaderWidths(headers),\n        totalColumnsMinWidth = _calculateHeaderWidth[0],\n        totalColumnsWidth = _calculateHeaderWidth[1],\n        totalColumnsMaxWidth = _calculateHeaderWidth[2];\n\n    getInstance().totalColumnsMinWidth = totalColumnsMinWidth;\n    getInstance().totalColumnsWidth = totalColumnsWidth;\n    getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;\n    loopHooks(getHooks().useInstance, getInstance()) // Each materialized header needs to be assigned a render function and other\n    // prop getter properties here.\n    ;\n    [].concat(getInstance().flatHeaders, getInstance().allColumns).forEach(function (column) {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column); // Give columns/headers a default getHeaderProps\n\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column: column\n      }); // Give columns/headers a default getFooterProps\n\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column: column\n      });\n    });\n    getInstance().headerGroups = React.useMemo(function () {\n      return headerGroups.filter(function (headerGroup, i) {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(function (column) {\n          var recurse = function recurse(headers) {\n            return headers.filter(function (column) {\n              if (column.headers) {\n                return recurse(column.headers);\n              }\n\n              return column.isVisible;\n            }).length;\n          };\n\n          if (column.headers) {\n            return recurse(column.headers);\n          }\n\n          return column.isVisible;\n        }); // Give headerGroups getRowProps\n\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {\n            instance: getInstance(),\n            headerGroup: headerGroup,\n            index: i\n          });\n          headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {\n            instance: getInstance(),\n            headerGroup: headerGroup,\n            index: i\n          });\n          return true;\n        }\n\n        return false;\n      });\n    }, [headerGroups, getInstance, getHooks]);\n    getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse(); // The prepareRow function is absolutely necessary and MUST be called on\n    // any rows the user wishes to be displayed.\n\n    getInstance().prepareRow = React.useCallback(function (row) {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row: row\n      }); // Build the visible cells for each row\n\n      row.allCells = allColumns.map(function (column) {\n        var value = row.values[column.id];\n        var cell = {\n          column: column,\n          row: row,\n          value: value\n        }; // Give each cell a getCellProps base\n\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell: cell\n        }); // Give each cell a renderer function (supports multiple renderers)\n\n        cell.render = makeRenderer(getInstance(), column, {\n          row: row,\n          cell: cell,\n          value: value\n        });\n        return cell;\n      });\n      row.cells = visibleColumns.map(function (column) {\n        return row.allCells.find(function (cell) {\n          return cell.column.id === column.id;\n        });\n      }); // need to apply any row specific hooks (useExpanded requires this)\n\n      loopHooks(getHooks().prepareRow, row, {\n        instance: getInstance()\n      });\n    }, [getHooks, getInstance, allColumns, visibleColumns]);\n    getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n      instance: getInstance()\n    });\n    getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {\n      instance: getInstance()\n    });\n    loopHooks(getHooks().useFinalInstance, getInstance());\n    return getInstance();\n  };\n\n  function calculateHeaderWidths(headers, left) {\n    if (left === void 0) {\n      left = 0;\n    }\n\n    var sumTotalMinWidth = 0;\n    var sumTotalWidth = 0;\n    var sumTotalMaxWidth = 0;\n    var sumTotalFlexWidth = 0;\n    headers.forEach(function (header) {\n      var subHeaders = header.headers;\n      header.totalLeft = left;\n\n      if (subHeaders && subHeaders.length) {\n        var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left),\n            totalMinWidth = _calculateHeaderWidth2[0],\n            totalWidth = _calculateHeaderWidth2[1],\n            totalMaxWidth = _calculateHeaderWidth2[2],\n            totalFlexWidth = _calculateHeaderWidth2[3];\n\n        header.totalMinWidth = totalMinWidth;\n        header.totalWidth = totalWidth;\n        header.totalMaxWidth = totalMaxWidth;\n        header.totalFlexWidth = totalFlexWidth;\n      } else {\n        header.totalMinWidth = header.minWidth;\n        header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);\n        header.totalMaxWidth = header.maxWidth;\n        header.totalFlexWidth = header.canResize ? header.totalWidth : 0;\n      }\n\n      if (header.isVisible) {\n        left += header.totalWidth;\n        sumTotalMinWidth += header.totalMinWidth;\n        sumTotalWidth += header.totalWidth;\n        sumTotalMaxWidth += header.totalMaxWidth;\n        sumTotalFlexWidth += header.totalFlexWidth;\n      }\n    });\n    return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth];\n  }\n\n  function accessRowsForColumn(_ref) {\n    var data = _ref.data,\n        rows = _ref.rows,\n        flatRows = _ref.flatRows,\n        rowsById = _ref.rowsById,\n        column = _ref.column,\n        getRowId = _ref.getRowId,\n        getSubRows = _ref.getSubRows,\n        accessValueHooks = _ref.accessValueHooks,\n        getInstance = _ref.getInstance; // Access the row's data column-by-column\n    // We do it this way so we can incrementally add materialized\n    // columns after the first pass and avoid excessive looping\n\n    var accessRow = function accessRow(originalRow, rowIndex, depth, parent, parentRows) {\n      if (depth === void 0) {\n        depth = 0;\n      } // Keep the original reference around\n\n\n      var original = originalRow;\n      var id = getRowId(originalRow, rowIndex, parent);\n      var row = rowsById[id]; // If the row hasn't been created, let's make it\n\n      if (!row) {\n        row = {\n          id: id,\n          original: original,\n          index: rowIndex,\n          depth: depth,\n          cells: [{}] // This is a dummy cell\n\n        }; // Override common array functions (and the dummy cell's getCellProps function)\n        // to show an error if it is accessed without calling prepareRow\n\n        row.cells.map = unpreparedAccessWarning;\n        row.cells.filter = unpreparedAccessWarning;\n        row.cells.forEach = unpreparedAccessWarning;\n        row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values\n\n        row.values = {}; // Push this row into the parentRows array\n\n        parentRows.push(row); // Keep track of every row in a flat array\n\n        flatRows.push(row); // Also keep track of every row by its ID\n\n        rowsById[id] = row; // Get the original subrows\n\n        row.originalSubRows = getSubRows(originalRow, rowIndex); // Then recursively access them\n\n        if (row.originalSubRows) {\n          var subRows = [];\n          row.originalSubRows.forEach(function (d, i) {\n            return accessRow(d, i, depth + 1, row, subRows);\n          }); // Keep the new subRows array on the row\n\n          row.subRows = subRows;\n        }\n      } else if (row.subRows) {\n        // If the row exists, then it's already been accessed\n        // Keep recursing, but don't worry about passing the\n        // accumlator array (those rows already exist)\n        row.originalSubRows.forEach(function (d, i) {\n          return accessRow(d, i, depth + 1, row);\n        });\n      } // If the column has an accessor, use it to get a value\n\n\n      if (column.accessor) {\n        row.values[column.id] = column.accessor(originalRow, rowIndex, row, parentRows, data);\n      } // Allow plugins to manipulate the column value\n\n\n      row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {\n        row: row,\n        column: column,\n        instance: getInstance()\n      }, true);\n    };\n\n    data.forEach(function (originalRow, rowIndex) {\n      return accessRow(originalRow, rowIndex, 0, undefined, rows);\n    });\n  }\n\n  actions.resetExpanded = 'resetExpanded';\n  actions.toggleRowExpanded = 'toggleRowExpanded';\n  actions.toggleAllRowsExpanded = 'toggleAllRowsExpanded';\n\n  var useExpanded = function useExpanded(hooks) {\n    hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps];\n    hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps];\n    hooks.stateReducers.push(reducer$1);\n    hooks.useInstance.push(useInstance$1);\n    hooks.prepareRow.push(prepareRow);\n  };\n\n  useExpanded.pluginName = 'useExpanded';\n\n  var defaultGetToggleAllRowsExpandedProps = function defaultGetToggleAllRowsExpandedProps(props, _ref) {\n    var instance = _ref.instance;\n    return [props, {\n      onClick: function onClick(e) {\n        instance.toggleAllRowsExpanded();\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      title: 'Toggle All Rows Expanded'\n    }];\n  };\n\n  var defaultGetToggleRowExpandedProps = function defaultGetToggleRowExpandedProps(props, _ref2) {\n    var row = _ref2.row;\n    return [props, {\n      onClick: function onClick() {\n        row.toggleRowExpanded();\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      title: 'Toggle Row Expanded'\n    }];\n  }; // Reducer\n\n\n  function reducer$1(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        expanded: {}\n      }, state);\n    }\n\n    if (action.type === actions.resetExpanded) {\n      return _extends({}, state, {\n        expanded: instance.initialState.expanded || {}\n      });\n    }\n\n    if (action.type === actions.toggleAllRowsExpanded) {\n      var value = action.value;\n      var rowsById = instance.rowsById;\n      var isAllRowsExpanded = Object.keys(rowsById).length === Object.keys(state.expanded).length;\n      var expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded;\n\n      if (expandAll) {\n        var expanded = {};\n        Object.keys(rowsById).forEach(function (rowId) {\n          expanded[rowId] = true;\n        });\n        return _extends({}, state, {\n          expanded: expanded\n        });\n      }\n\n      return _extends({}, state, {\n        expanded: {}\n      });\n    }\n\n    if (action.type === actions.toggleRowExpanded) {\n      var id = action.id,\n          setExpanded = action.value;\n      var exists = state.expanded[id];\n      var shouldExist = typeof setExpanded !== 'undefined' ? setExpanded : !exists;\n\n      if (!exists && shouldExist) {\n        var _extends2;\n\n        return _extends({}, state, {\n          expanded: _extends({}, state.expanded, (_extends2 = {}, _extends2[id] = true, _extends2))\n        });\n      } else if (exists && !shouldExist) {\n        var _state$expanded = state.expanded,\n            _ = _state$expanded[id],\n            rest = _objectWithoutPropertiesLoose(_state$expanded, [id].map(_toPropertyKey));\n\n        return _extends({}, state, {\n          expanded: rest\n        });\n      } else {\n        return state;\n      }\n    }\n  }\n\n  function useInstance$1(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        rowsById = instance.rowsById,\n        _instance$manualExpan = instance.manualExpandedKey,\n        manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n        _instance$paginateExp = instance.paginateExpandedRows,\n        paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n        _instance$expandSubRo = instance.expandSubRows,\n        expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n        _instance$autoResetEx = instance.autoResetExpanded,\n        autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx,\n        getHooks = instance.getHooks,\n        plugins = instance.plugins,\n        expanded = instance.state.expanded,\n        dispatch = instance.dispatch;\n    ensurePluginOrder(plugins, ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'], 'useExpanded');\n    var getAutoResetExpanded = useGetLatest(autoResetExpanded);\n    var isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);\n\n    if (isAllRowsExpanded) {\n      if (Object.keys(rowsById).some(function (id) {\n        return !expanded[id];\n      })) {\n        isAllRowsExpanded = false;\n      }\n    } // Bypass any effects from firing when this changes\n\n\n    useMountedLayoutEffect(function () {\n      if (getAutoResetExpanded()) {\n        dispatch({\n          type: actions.resetExpanded\n        });\n      }\n    }, [dispatch, data]);\n    var toggleRowExpanded = React.useCallback(function (id, value) {\n      dispatch({\n        type: actions.toggleRowExpanded,\n        id: id,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleAllRowsExpanded = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleAllRowsExpanded,\n        value: value\n      });\n    }, [dispatch]);\n    var expandedRows = React.useMemo(function () {\n      if (paginateExpandedRows) {\n        return expandRows(rows, {\n          manualExpandedKey: manualExpandedKey,\n          expanded: expanded,\n          expandSubRows: expandSubRows\n        });\n      }\n\n      return rows;\n    }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);\n    var expandedDepth = React.useMemo(function () {\n      return findExpandedDepth(expanded);\n    }, [expanded]);\n    var getInstance = useGetLatest(instance);\n    var getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {\n      instance: getInstance()\n    });\n    Object.assign(instance, {\n      preExpandedRows: rows,\n      expandedRows: expandedRows,\n      rows: expandedRows,\n      expandedDepth: expandedDepth,\n      isAllRowsExpanded: isAllRowsExpanded,\n      toggleRowExpanded: toggleRowExpanded,\n      toggleAllRowsExpanded: toggleAllRowsExpanded,\n      getToggleAllRowsExpandedProps: getToggleAllRowsExpandedProps\n    });\n  }\n\n  function prepareRow(row, _ref3) {\n    var getHooks = _ref3.instance.getHooks,\n        instance = _ref3.instance;\n\n    row.toggleRowExpanded = function (set) {\n      return instance.toggleRowExpanded(row.id, set);\n    };\n\n    row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {\n      instance: instance,\n      row: row\n    });\n  }\n\n  function findExpandedDepth(expanded) {\n    var maxDepth = 0;\n    Object.keys(expanded).forEach(function (id) {\n      var splitId = id.split('.');\n      maxDepth = Math.max(maxDepth, splitId.length);\n    });\n    return maxDepth;\n  }\n\n  var text = function text(rows, ids, filterValue) {\n    rows = rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());\n      });\n    });\n    return rows;\n  };\n\n  text.autoRemove = function (val) {\n    return !val;\n  };\n\n  var exactText = function exactText(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;\n      });\n    });\n  };\n\n  exactText.autoRemove = function (val) {\n    return !val;\n  };\n\n  var exactTextCase = function exactTextCase(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue) === String(filterValue) : true;\n      });\n    });\n  };\n\n  exactTextCase.autoRemove = function (val) {\n    return !val;\n  };\n\n  var includes = function includes(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue.includes(filterValue);\n      });\n    });\n  };\n\n  includes.autoRemove = function (val) {\n    return !val || !val.length;\n  };\n\n  var includesAll = function includesAll(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue && rowValue.length && filterValue.every(function (val) {\n          return rowValue.includes(val);\n        });\n      });\n    });\n  };\n\n  includesAll.autoRemove = function (val) {\n    return !val || !val.length;\n  };\n\n  var includesSome = function includesSome(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue && rowValue.length && filterValue.some(function (val) {\n          return rowValue.includes(val);\n        });\n      });\n    });\n  };\n\n  includesSome.autoRemove = function (val) {\n    return !val || !val.length;\n  };\n\n  var includesValue = function includesValue(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return filterValue.includes(rowValue);\n      });\n    });\n  };\n\n  includesValue.autoRemove = function (val) {\n    return !val || !val.length;\n  };\n\n  var exact = function exact(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue === filterValue;\n      });\n    });\n  };\n\n  exact.autoRemove = function (val) {\n    return typeof val === 'undefined';\n  };\n\n  var equals = function equals(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id]; // eslint-disable-next-line eqeqeq\n\n        return rowValue == filterValue;\n      });\n    });\n  };\n\n  equals.autoRemove = function (val) {\n    return val == null;\n  };\n\n  var between = function between(rows, ids, filterValue) {\n    var _ref = filterValue || [],\n        min = _ref[0],\n        max = _ref[1];\n\n    min = typeof min === 'number' ? min : -Infinity;\n    max = typeof max === 'number' ? max : Infinity;\n\n    if (min > max) {\n      var temp = min;\n      min = max;\n      max = temp;\n    }\n\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue >= min && rowValue <= max;\n      });\n    });\n  };\n\n  between.autoRemove = function (val) {\n    return !val || typeof val[0] !== 'number' && typeof val[1] !== 'number';\n  };\n\n  var filterTypes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    text: text,\n    exactText: exactText,\n    exactTextCase: exactTextCase,\n    includes: includes,\n    includesAll: includesAll,\n    includesSome: includesSome,\n    includesValue: includesValue,\n    exact: exact,\n    equals: equals,\n    between: between\n  });\n  actions.resetFilters = 'resetFilters';\n  actions.setFilter = 'setFilter';\n  actions.setAllFilters = 'setAllFilters';\n\n  var useFilters = function useFilters(hooks) {\n    hooks.stateReducers.push(reducer$2);\n    hooks.useInstance.push(useInstance$2);\n  };\n\n  useFilters.pluginName = 'useFilters';\n\n  function reducer$2(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        filters: []\n      }, state);\n    }\n\n    if (action.type === actions.resetFilters) {\n      return _extends({}, state, {\n        filters: instance.initialState.filters || []\n      });\n    }\n\n    if (action.type === actions.setFilter) {\n      var columnId = action.columnId,\n          filterValue = action.filterValue;\n      var allColumns = instance.allColumns,\n          userFilterTypes = instance.filterTypes;\n      var column = allColumns.find(function (d) {\n        return d.id === columnId;\n      });\n\n      if (!column) {\n        throw new Error(\"React-Table: Could not find a column with id: \" + columnId);\n      }\n\n      var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n      var previousfilter = state.filters.find(function (d) {\n        return d.id === columnId;\n      });\n      var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value); //\n\n      if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n        return _extends({}, state, {\n          filters: state.filters.filter(function (d) {\n            return d.id !== columnId;\n          })\n        });\n      }\n\n      if (previousfilter) {\n        return _extends({}, state, {\n          filters: state.filters.map(function (d) {\n            if (d.id === columnId) {\n              return {\n                id: columnId,\n                value: newFilter\n              };\n            }\n\n            return d;\n          })\n        });\n      }\n\n      return _extends({}, state, {\n        filters: [].concat(state.filters, [{\n          id: columnId,\n          value: newFilter\n        }])\n      });\n    }\n\n    if (action.type === actions.setAllFilters) {\n      var filters = action.filters;\n      var _allColumns = instance.allColumns,\n          _userFilterTypes = instance.filterTypes;\n      return _extends({}, state, {\n        // Filter out undefined values\n        filters: functionalUpdate(filters, state.filters).filter(function (filter) {\n          var column = _allColumns.find(function (d) {\n            return d.id === filter.id;\n          });\n\n          var filterMethod = getFilterMethod(column.filter, _userFilterTypes || {}, filterTypes);\n\n          if (shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)) {\n            return false;\n          }\n\n          return true;\n        })\n      });\n    }\n  }\n\n  function useInstance$2(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        rowsById = instance.rowsById,\n        allColumns = instance.allColumns,\n        userFilterTypes = instance.filterTypes,\n        manualFilters = instance.manualFilters,\n        _instance$defaultCanF = instance.defaultCanFilter,\n        defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF,\n        disableFilters = instance.disableFilters,\n        filters = instance.state.filters,\n        dispatch = instance.dispatch,\n        _instance$autoResetFi = instance.autoResetFilters,\n        autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;\n    var setFilter = React.useCallback(function (columnId, filterValue) {\n      dispatch({\n        type: actions.setFilter,\n        columnId: columnId,\n        filterValue: filterValue\n      });\n    }, [dispatch]);\n    var setAllFilters = React.useCallback(function (filters) {\n      dispatch({\n        type: actions.setAllFilters,\n        filters: filters\n      });\n    }, [dispatch]);\n    allColumns.forEach(function (column) {\n      var id = column.id,\n          accessor = column.accessor,\n          columnDefaultCanFilter = column.defaultCanFilter,\n          columnDisableFilters = column.disableFilters; // Determine if a column is filterable\n\n      column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : undefined, disableFilters === true ? false : undefined, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false); // Provide the column a way of updating the filter value\n\n      column.setFilter = function (val) {\n        return setFilter(column.id, val);\n      }; // Provide the current filter value to the column for\n      // convenience\n\n\n      var found = filters.find(function (d) {\n        return d.id === id;\n      });\n      column.filterValue = found && found.value;\n    });\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualFilters || !filters.length) {\n        return [rows, flatRows, rowsById];\n      }\n\n      var filteredFlatRows = [];\n      var filteredRowsById = {}; // Filters top level and nested rows\n\n      var filterRows = function filterRows(rows, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n\n        var filteredRows = rows;\n        filteredRows = filters.reduce(function (filteredSoFar, _ref) {\n          var columnId = _ref.id,\n              filterValue = _ref.value; // Find the filters column\n\n          var column = allColumns.find(function (d) {\n            return d.id === columnId;\n          });\n\n          if (!column) {\n            return filteredSoFar;\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar;\n          }\n\n          var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n\n          if (!filterMethod) {\n            console.warn(\"Could not find a valid 'column.filter' for column with the ID: \" + column.id + \".\");\n            return filteredSoFar;\n          } // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n\n\n          column.filteredRows = filterMethod(filteredSoFar, [columnId], filterValue);\n          return column.filteredRows;\n        }, rows); // Apply the filter to any subRows\n        // We technically could do this recursively in the above loop,\n        // but that would severely hinder the API for the user, since they\n        // would be required to do that recursion in some scenarios\n\n        filteredRows.forEach(function (row) {\n          filteredFlatRows.push(row);\n          filteredRowsById[row.id] = row;\n\n          if (!row.subRows) {\n            return;\n          }\n\n          row.subRows = row.subRows && row.subRows.length > 0 ? filterRows(row.subRows, depth + 1) : row.subRows;\n        });\n        return filteredRows;\n      };\n\n      return [filterRows(rows), filteredFlatRows, filteredRowsById];\n    }, [manualFilters, filters, rows, flatRows, rowsById, allColumns, userFilterTypes]),\n        filteredRows = _React$useMemo[0],\n        filteredFlatRows = _React$useMemo[1],\n        filteredRowsById = _React$useMemo[2];\n\n    React.useMemo(function () {\n      // Now that each filtered column has it's partially filtered rows,\n      // lets assign the final filtered rows to all of the other columns\n      var nonFilteredColumns = allColumns.filter(function (column) {\n        return !filters.find(function (d) {\n          return d.id === column.id;\n        });\n      }); // This essentially enables faceted filter options to be built easily\n      // using every column's preFilteredRows value\n\n      nonFilteredColumns.forEach(function (column) {\n        column.preFilteredRows = filteredRows;\n        column.filteredRows = filteredRows;\n      });\n    }, [filteredRows, filters, allColumns]);\n    var getAutoResetFilters = useGetLatest(autoResetFilters);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetFilters()) {\n        dispatch({\n          type: actions.resetFilters\n        });\n      }\n    }, [dispatch, manualFilters ? null : data]);\n    Object.assign(instance, {\n      preFilteredRows: rows,\n      preFilteredFlatRows: flatRows,\n      preFilteredRowsById: rowsById,\n      filteredRows: filteredRows,\n      filteredFlatRows: filteredFlatRows,\n      filteredRowsById: filteredRowsById,\n      rows: filteredRows,\n      flatRows: filteredFlatRows,\n      rowsById: filteredRowsById,\n      setFilter: setFilter,\n      setAllFilters: setAllFilters\n    });\n  }\n\n  actions.resetGlobalFilter = 'resetGlobalFilter';\n  actions.setGlobalFilter = 'setGlobalFilter';\n\n  var useGlobalFilter = function useGlobalFilter(hooks) {\n    hooks.stateReducers.push(reducer$3);\n    hooks.useInstance.push(useInstance$3);\n  };\n\n  useGlobalFilter.pluginName = 'useGlobalFilter';\n\n  function reducer$3(state, action, previousState, instance) {\n    if (action.type === actions.resetGlobalFilter) {\n      return _extends({}, state, {\n        globalFilter: instance.initialState.globalFilter || undefined\n      });\n    }\n\n    if (action.type === actions.setGlobalFilter) {\n      var filterValue = action.filterValue;\n      var userFilterTypes = instance.userFilterTypes;\n      var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);\n      var newFilter = functionalUpdate(filterValue, state.globalFilter); //\n\n      if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n        var globalFilter = state.globalFilter,\n            stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, [\"globalFilter\"]);\n\n        return stateWithoutGlobalFilter;\n      }\n\n      return _extends({}, state, {\n        globalFilter: newFilter\n      });\n    }\n  }\n\n  function useInstance$3(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        rowsById = instance.rowsById,\n        allColumns = instance.allColumns,\n        userFilterTypes = instance.filterTypes,\n        globalFilter = instance.globalFilter,\n        manualGlobalFilter = instance.manualGlobalFilter,\n        globalFilterValue = instance.state.globalFilter,\n        dispatch = instance.dispatch,\n        _instance$autoResetGl = instance.autoResetGlobalFilter,\n        autoResetGlobalFilter = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl,\n        disableGlobalFilter = instance.disableGlobalFilter;\n    var setGlobalFilter = React.useCallback(function (filterValue) {\n      dispatch({\n        type: actions.setGlobalFilter,\n        filterValue: filterValue\n      });\n    }, [dispatch]); // TODO: Create a filter cache for incremental high speed multi-filtering\n    // This gets pretty complicated pretty fast, since you have to maintain a\n    // cache for each row group (top-level rows, and each row's recursive subrows)\n    // This would make multi-filtering a lot faster though. Too far?\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n        return [rows, flatRows, rowsById];\n      }\n\n      var filteredFlatRows = [];\n      var filteredRowsById = {};\n      var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);\n\n      if (!filterMethod) {\n        console.warn(\"Could not find a valid 'globalFilter' option.\");\n        return rows;\n      }\n\n      allColumns.forEach(function (column) {\n        var columnDisableGlobalFilter = column.disableGlobalFilter;\n        column.canFilter = getFirstDefined(columnDisableGlobalFilter === true ? false : undefined, disableGlobalFilter === true ? false : undefined, true);\n      });\n      var filterableColumns = allColumns.filter(function (c) {\n        return c.canFilter === true;\n      }); // Filters top level and nested rows\n\n      var filterRows = function filterRows(filteredRows) {\n        filteredRows = filterMethod(filteredRows, filterableColumns.map(function (d) {\n          return d.id;\n        }), globalFilterValue);\n        filteredRows.forEach(function (row) {\n          filteredFlatRows.push(row);\n          filteredRowsById[row.id] = row;\n          row.subRows = row.subRows && row.subRows.length ? filterRows(row.subRows) : row.subRows;\n        });\n        return filteredRows;\n      };\n\n      return [filterRows(rows), filteredFlatRows, filteredRowsById];\n    }, [manualGlobalFilter, globalFilterValue, globalFilter, userFilterTypes, allColumns, rows, flatRows, rowsById, disableGlobalFilter]),\n        globalFilteredRows = _React$useMemo[0],\n        globalFilteredFlatRows = _React$useMemo[1],\n        globalFilteredRowsById = _React$useMemo[2];\n\n    var getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetGlobalFilter()) {\n        dispatch({\n          type: actions.resetGlobalFilter\n        });\n      }\n    }, [dispatch, manualGlobalFilter ? null : data]);\n    Object.assign(instance, {\n      preGlobalFilteredRows: rows,\n      preGlobalFilteredFlatRows: flatRows,\n      preGlobalFilteredRowsById: rowsById,\n      globalFilteredRows: globalFilteredRows,\n      globalFilteredFlatRows: globalFilteredFlatRows,\n      globalFilteredRowsById: globalFilteredRowsById,\n      rows: globalFilteredRows,\n      flatRows: globalFilteredFlatRows,\n      rowsById: globalFilteredRowsById,\n      setGlobalFilter: setGlobalFilter,\n      disableGlobalFilter: disableGlobalFilter\n    });\n  }\n\n  function sum(values, aggregatedValues) {\n    // It's faster to just add the aggregations together instead of\n    // process leaf nodes individually\n    return aggregatedValues.reduce(function (sum, next) {\n      return sum + (typeof next === 'number' ? next : 0);\n    }, 0);\n  }\n\n  function min(values) {\n    var min = values[0] || 0;\n    values.forEach(function (value) {\n      if (typeof value === 'number') {\n        min = Math.min(min, value);\n      }\n    });\n    return min;\n  }\n\n  function max(values) {\n    var max = values[0] || 0;\n    values.forEach(function (value) {\n      if (typeof value === 'number') {\n        max = Math.max(max, value);\n      }\n    });\n    return max;\n  }\n\n  function minMax(values) {\n    var min = values[0] || 0;\n    var max = values[0] || 0;\n    values.forEach(function (value) {\n      if (typeof value === 'number') {\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    });\n    return min + \"..\" + max;\n  }\n\n  function average(values) {\n    return sum(null, values) / values.length;\n  }\n\n  function median(values) {\n    if (!values.length) {\n      return null;\n    }\n\n    var mid = Math.floor(values.length / 2);\n    var nums = [].concat(values).sort(function (a, b) {\n      return a - b;\n    });\n    return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n  }\n\n  function unique(values) {\n    return Array.from(new Set(values).values());\n  }\n\n  function uniqueCount(values) {\n    return new Set(values).size;\n  }\n\n  function count(values) {\n    return values.length;\n  }\n\n  var aggregations = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    sum: sum,\n    min: min,\n    max: max,\n    minMax: minMax,\n    average: average,\n    median: median,\n    unique: unique,\n    uniqueCount: uniqueCount,\n    count: count\n  });\n  var emptyArray = [];\n  var emptyObject = {}; // Actions\n\n  actions.resetGroupBy = 'resetGroupBy';\n  actions.setGroupBy = 'setGroupBy';\n  actions.toggleGroupBy = 'toggleGroupBy';\n\n  var useGroupBy = function useGroupBy(hooks) {\n    hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps];\n    hooks.stateReducers.push(reducer$4);\n    hooks.visibleColumnsDeps.push(function (deps, _ref) {\n      var instance = _ref.instance;\n      return [].concat(deps, [instance.state.groupBy]);\n    });\n    hooks.visibleColumns.push(visibleColumns);\n    hooks.useInstance.push(useInstance$4);\n    hooks.prepareRow.push(prepareRow$1);\n  };\n\n  useGroupBy.pluginName = 'useGroupBy';\n\n  var defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps(props, _ref2) {\n    var header = _ref2.header;\n    return [props, {\n      onClick: header.canGroupBy ? function (e) {\n        e.persist();\n        header.toggleGroupBy();\n      } : undefined,\n      style: {\n        cursor: header.canGroupBy ? 'pointer' : undefined\n      },\n      title: 'Toggle GroupBy'\n    }];\n  }; // Reducer\n\n\n  function reducer$4(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        groupBy: []\n      }, state);\n    }\n\n    if (action.type === actions.resetGroupBy) {\n      return _extends({}, state, {\n        groupBy: instance.initialState.groupBy || []\n      });\n    }\n\n    if (action.type === actions.setGroupBy) {\n      var value = action.value;\n      return _extends({}, state, {\n        groupBy: value\n      });\n    }\n\n    if (action.type === actions.toggleGroupBy) {\n      var columnId = action.columnId,\n          setGroupBy = action.value;\n      var resolvedGroupBy = typeof setGroupBy !== 'undefined' ? setGroupBy : !state.groupBy.includes(columnId);\n\n      if (resolvedGroupBy) {\n        return _extends({}, state, {\n          groupBy: [].concat(state.groupBy, [columnId])\n        });\n      }\n\n      return _extends({}, state, {\n        groupBy: state.groupBy.filter(function (d) {\n          return d !== columnId;\n        })\n      });\n    }\n  }\n\n  function visibleColumns(columns, _ref3) {\n    var groupBy = _ref3.instance.state.groupBy; // Sort grouped columns to the start of the column list\n    // before the headers are built\n\n    var groupByColumns = groupBy.map(function (g) {\n      return columns.find(function (col) {\n        return col.id === g;\n      });\n    }).filter(Boolean);\n    var nonGroupByColumns = columns.filter(function (col) {\n      return !groupBy.includes(col.id);\n    });\n    columns = [].concat(groupByColumns, nonGroupByColumns);\n    columns.forEach(function (column) {\n      column.isGrouped = groupBy.includes(column.id);\n      column.groupedIndex = groupBy.indexOf(column.id);\n    });\n    return columns;\n  }\n\n  var defaultUserAggregations = {};\n\n  function useInstance$4(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        rowsById = instance.rowsById,\n        allColumns = instance.allColumns,\n        flatHeaders = instance.flatHeaders,\n        _instance$groupByFn = instance.groupByFn,\n        groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn,\n        manualGroupBy = instance.manualGroupBy,\n        _instance$aggregation = instance.aggregations,\n        userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation,\n        plugins = instance.plugins,\n        groupBy = instance.state.groupBy,\n        dispatch = instance.dispatch,\n        _instance$autoResetGr = instance.autoResetGroupBy,\n        autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr,\n        disableGroupBy = instance.disableGroupBy,\n        defaultCanGroupBy = instance.defaultCanGroupBy,\n        getHooks = instance.getHooks;\n    ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy');\n    var getInstance = useGetLatest(instance);\n    allColumns.forEach(function (column) {\n      var accessor = column.accessor,\n          defaultColumnGroupBy = column.defaultGroupBy,\n          columnDisableGroupBy = column.disableGroupBy;\n      column.canGroupBy = accessor ? getFirstDefined(column.canGroupBy, columnDisableGroupBy === true ? false : undefined, disableGroupBy === true ? false : undefined, true) : getFirstDefined(column.canGroupBy, defaultColumnGroupBy, defaultCanGroupBy, false);\n\n      if (column.canGroupBy) {\n        column.toggleGroupBy = function () {\n          return instance.toggleGroupBy(column.id);\n        };\n      }\n\n      column.Aggregated = column.Aggregated || column.Cell;\n    });\n    var toggleGroupBy = React.useCallback(function (columnId, value) {\n      dispatch({\n        type: actions.toggleGroupBy,\n        columnId: columnId,\n        value: value\n      });\n    }, [dispatch]);\n    var setGroupBy = React.useCallback(function (value) {\n      dispatch({\n        type: actions.setGroupBy,\n        value: value\n      });\n    }, [dispatch]);\n    flatHeaders.forEach(function (header) {\n      header.getGroupByToggleProps = makePropGetter(getHooks().getGroupByToggleProps, {\n        instance: getInstance(),\n        header: header\n      });\n    });\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualGroupBy || !groupBy.length) {\n        return [rows, flatRows, rowsById, emptyArray, emptyObject, flatRows, rowsById];\n      } // Ensure that the list of filtered columns exist\n\n\n      var existingGroupBy = groupBy.filter(function (g) {\n        return allColumns.find(function (col) {\n          return col.id === g;\n        });\n      }); // Find the columns that can or are aggregating\n      // Uses each column to aggregate rows into a single value\n\n      var aggregateRowsToValues = function aggregateRowsToValues(leafRows, groupedRows, depth) {\n        var values = {};\n        allColumns.forEach(function (column) {\n          // Don't aggregate columns that are in the groupBy\n          if (existingGroupBy.includes(column.id)) {\n            values[column.id] = groupedRows[0] ? groupedRows[0].values[column.id] : null;\n            return;\n          } // Aggregate the values\n\n\n          var aggregateFn = typeof column.aggregate === 'function' ? column.aggregate : userAggregations[column.aggregate] || aggregations[column.aggregate];\n\n          if (aggregateFn) {\n            // Get the columnValues to aggregate\n            var groupedValues = groupedRows.map(function (row) {\n              return row.values[column.id];\n            }); // Get the columnValues to aggregate\n\n            var leafValues = leafRows.map(function (row) {\n              var columnValue = row.values[column.id];\n\n              if (!depth && column.aggregateValue) {\n                var aggregateValueFn = typeof column.aggregateValue === 'function' ? column.aggregateValue : userAggregations[column.aggregateValue] || aggregations[column.aggregateValue];\n\n                if (!aggregateValueFn) {\n                  console.info({\n                    column: column\n                  });\n                  throw new Error(\"React Table: Invalid column.aggregateValue option for column listed above\");\n                }\n\n                columnValue = aggregateValueFn(columnValue, row, column);\n              }\n\n              return columnValue;\n            });\n            values[column.id] = aggregateFn(leafValues, groupedValues);\n          } else if (column.aggregate) {\n            console.info({\n              column: column\n            });\n            throw new Error(\"React Table: Invalid column.aggregate option for column listed above\");\n          } else {\n            values[column.id] = null;\n          }\n        });\n        return values;\n      };\n\n      var groupedFlatRows = [];\n      var groupedRowsById = {};\n      var onlyGroupedFlatRows = [];\n      var onlyGroupedRowsById = {};\n      var nonGroupedFlatRows = [];\n      var nonGroupedRowsById = {}; // Recursively group the data\n\n      var groupUpRecursively = function groupUpRecursively(rows, depth, parentId) {\n        if (depth === void 0) {\n          depth = 0;\n        } // This is the last level, just return the rows\n\n\n        if (depth === existingGroupBy.length) {\n          return rows.map(function (row) {\n            return _extends({}, row, {\n              depth: depth\n            });\n          });\n        }\n\n        var columnId = existingGroupBy[depth]; // Group the rows together for this level\n\n        var rowGroupsMap = groupByFn(rows, columnId); // Peform aggregations for each group\n\n        var aggregatedGroupedRows = Object.entries(rowGroupsMap).map(function (_ref4, index) {\n          var groupByVal = _ref4[0],\n              groupedRows = _ref4[1];\n          var id = columnId + \":\" + groupByVal;\n          id = parentId ? parentId + \">\" + id : id; // First, Recurse to group sub rows before aggregation\n\n          var subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group\n\n          var leafRows = depth ? flattenBy(groupedRows, 'leafRows') : groupedRows;\n          var values = aggregateRowsToValues(leafRows, groupedRows, depth);\n          var row = {\n            id: id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal: groupByVal,\n            values: values,\n            subRows: subRows,\n            leafRows: leafRows,\n            depth: depth,\n            index: index\n          };\n          subRows.forEach(function (subRow) {\n            groupedFlatRows.push(subRow);\n            groupedRowsById[subRow.id] = subRow;\n\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow);\n              onlyGroupedRowsById[subRow.id] = subRow;\n            } else {\n              nonGroupedFlatRows.push(subRow);\n              nonGroupedRowsById[subRow.id] = subRow;\n            }\n          });\n          return row;\n        });\n        return aggregatedGroupedRows;\n      };\n\n      var groupedRows = groupUpRecursively(rows);\n      groupedRows.forEach(function (subRow) {\n        groupedFlatRows.push(subRow);\n        groupedRowsById[subRow.id] = subRow;\n\n        if (subRow.isGrouped) {\n          onlyGroupedFlatRows.push(subRow);\n          onlyGroupedRowsById[subRow.id] = subRow;\n        } else {\n          nonGroupedFlatRows.push(subRow);\n          nonGroupedRowsById[subRow.id] = subRow;\n        }\n      }); // Assign the new data\n\n      return [groupedRows, groupedFlatRows, groupedRowsById, onlyGroupedFlatRows, onlyGroupedRowsById, nonGroupedFlatRows, nonGroupedRowsById];\n    }, [manualGroupBy, groupBy, rows, flatRows, rowsById, allColumns, userAggregations, groupByFn]),\n        groupedRows = _React$useMemo[0],\n        groupedFlatRows = _React$useMemo[1],\n        groupedRowsById = _React$useMemo[2],\n        onlyGroupedFlatRows = _React$useMemo[3],\n        onlyGroupedRowsById = _React$useMemo[4],\n        nonGroupedFlatRows = _React$useMemo[5],\n        nonGroupedRowsById = _React$useMemo[6];\n\n    var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetGroupBy()) {\n        dispatch({\n          type: actions.resetGroupBy\n        });\n      }\n    }, [dispatch, manualGroupBy ? null : data]);\n    Object.assign(instance, {\n      preGroupedRows: rows,\n      preGroupedFlatRow: flatRows,\n      preGroupedRowsById: rowsById,\n      groupedRows: groupedRows,\n      groupedFlatRows: groupedFlatRows,\n      groupedRowsById: groupedRowsById,\n      onlyGroupedFlatRows: onlyGroupedFlatRows,\n      onlyGroupedRowsById: onlyGroupedRowsById,\n      nonGroupedFlatRows: nonGroupedFlatRows,\n      nonGroupedRowsById: nonGroupedRowsById,\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById,\n      toggleGroupBy: toggleGroupBy,\n      setGroupBy: setGroupBy\n    });\n  }\n\n  function prepareRow$1(row) {\n    row.allCells.forEach(function (cell) {\n      var _row$subRows; // Grouped cells are in the groupBy and the pivot cell for the row\n\n\n      cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID; // Placeholder cells are any columns in the groupBy that are not grouped\n\n      cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped; // Aggregated cells are not grouped, not repeated, but still have subRows\n\n      cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && ((_row$subRows = row.subRows) == null ? void 0 : _row$subRows.length);\n    });\n  }\n\n  function defaultGroupByFn(rows, columnId) {\n    return rows.reduce(function (prev, row, i) {\n      // TODO: Might want to implement a key serializer here so\n      // irregular column values can still be grouped if needed?\n      var resKey = \"\" + row.values[columnId];\n      prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];\n      prev[resKey].push(row);\n      return prev;\n    }, {});\n  }\n\n  var reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.\n  // It handles numbers, mixed alphanumeric combinations, and even\n  // null, undefined, and Infinity\n\n  var alphanumeric = function alphanumeric(rowA, rowB, columnId) {\n    var _getRowValuesByColumn = getRowValuesByColumnID(rowA, rowB, columnId),\n        a = _getRowValuesByColumn[0],\n        b = _getRowValuesByColumn[1]; // Force to strings (or \"\" for unsupported types)\n\n\n    a = toString(a);\n    b = toString(b); // Split on number groups, but keep the delimiter\n    // Then remove falsey split values\n\n    a = a.split(reSplitAlphaNumeric).filter(Boolean);\n    b = b.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n    while (a.length && b.length) {\n      var aa = a.shift();\n      var bb = b.shift();\n      var an = parseInt(aa, 10);\n      var bn = parseInt(bb, 10);\n      var combo = [an, bn].sort(); // Both are string\n\n      if (isNaN(combo[0])) {\n        if (aa > bb) {\n          return 1;\n        }\n\n        if (bb > aa) {\n          return -1;\n        }\n\n        continue;\n      } // One is a string, one is a number\n\n\n      if (isNaN(combo[1])) {\n        return isNaN(an) ? -1 : 1;\n      } // Both are numbers\n\n\n      if (an > bn) {\n        return 1;\n      }\n\n      if (bn > an) {\n        return -1;\n      }\n    }\n\n    return a.length - b.length;\n  };\n\n  function datetime(rowA, rowB, columnId) {\n    var _getRowValuesByColumn2 = getRowValuesByColumnID(rowA, rowB, columnId),\n        a = _getRowValuesByColumn2[0],\n        b = _getRowValuesByColumn2[1];\n\n    a = a.getTime();\n    b = b.getTime();\n    return compareBasic(a, b);\n  }\n\n  function basic(rowA, rowB, columnId) {\n    var _getRowValuesByColumn3 = getRowValuesByColumnID(rowA, rowB, columnId),\n        a = _getRowValuesByColumn3[0],\n        b = _getRowValuesByColumn3[1];\n\n    return compareBasic(a, b);\n  }\n\n  function string(rowA, rowB, columnId) {\n    var _getRowValuesByColumn4 = getRowValuesByColumnID(rowA, rowB, columnId),\n        a = _getRowValuesByColumn4[0],\n        b = _getRowValuesByColumn4[1];\n\n    a = a.split('').filter(Boolean);\n    b = b.split('').filter(Boolean);\n\n    while (a.length && b.length) {\n      var aa = a.shift();\n      var bb = b.shift();\n      var alower = aa.toLowerCase();\n      var blower = bb.toLowerCase(); // Case insensitive comparison until characters match\n\n      if (alower > blower) {\n        return 1;\n      }\n\n      if (blower > alower) {\n        return -1;\n      } // If lowercase characters are identical\n\n\n      if (aa > bb) {\n        return 1;\n      }\n\n      if (bb > aa) {\n        return -1;\n      }\n\n      continue;\n    }\n\n    return a.length - b.length;\n  }\n\n  function number(rowA, rowB, columnId) {\n    var _getRowValuesByColumn5 = getRowValuesByColumnID(rowA, rowB, columnId),\n        a = _getRowValuesByColumn5[0],\n        b = _getRowValuesByColumn5[1];\n\n    var replaceNonNumeric = /[^0-9.]/gi;\n    a = Number(String(a).replace(replaceNonNumeric, ''));\n    b = Number(String(b).replace(replaceNonNumeric, ''));\n    return compareBasic(a, b);\n  } // Utils\n\n\n  function compareBasic(a, b) {\n    return a === b ? 0 : a > b ? 1 : -1;\n  }\n\n  function getRowValuesByColumnID(row1, row2, columnId) {\n    return [row1.values[columnId], row2.values[columnId]];\n  }\n\n  function toString(a) {\n    if (typeof a === 'number') {\n      if (isNaN(a) || a === Infinity || a === -Infinity) {\n        return '';\n      }\n\n      return String(a);\n    }\n\n    if (typeof a === 'string') {\n      return a;\n    }\n\n    return '';\n  }\n\n  var sortTypes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    alphanumeric: alphanumeric,\n    datetime: datetime,\n    basic: basic,\n    string: string,\n    number: number\n  });\n  actions.resetSortBy = 'resetSortBy';\n  actions.setSortBy = 'setSortBy';\n  actions.toggleSortBy = 'toggleSortBy';\n  actions.clearSortBy = 'clearSortBy';\n  defaultColumn.sortType = 'alphanumeric';\n  defaultColumn.sortDescFirst = false;\n\n  var useSortBy = function useSortBy(hooks) {\n    hooks.getSortByToggleProps = [defaultGetSortByToggleProps];\n    hooks.stateReducers.push(reducer$5);\n    hooks.useInstance.push(useInstance$5);\n  };\n\n  useSortBy.pluginName = 'useSortBy';\n\n  var defaultGetSortByToggleProps = function defaultGetSortByToggleProps(props, _ref) {\n    var instance = _ref.instance,\n        column = _ref.column;\n    var _instance$isMultiSort = instance.isMultiSortEvent,\n        isMultiSortEvent = _instance$isMultiSort === void 0 ? function (e) {\n      return e.shiftKey;\n    } : _instance$isMultiSort;\n    return [props, {\n      onClick: column.canSort ? function (e) {\n        e.persist();\n        column.toggleSortBy(undefined, !instance.disableMultiSort && isMultiSortEvent(e));\n      } : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined\n    }];\n  }; // Reducer\n\n\n  function reducer$5(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        sortBy: []\n      }, state);\n    }\n\n    if (action.type === actions.resetSortBy) {\n      return _extends({}, state, {\n        sortBy: instance.initialState.sortBy || []\n      });\n    }\n\n    if (action.type === actions.clearSortBy) {\n      var sortBy = state.sortBy;\n      var newSortBy = sortBy.filter(function (d) {\n        return d.id !== action.columnId;\n      });\n      return _extends({}, state, {\n        sortBy: newSortBy\n      });\n    }\n\n    if (action.type === actions.setSortBy) {\n      var _sortBy = action.sortBy;\n      return _extends({}, state, {\n        sortBy: _sortBy\n      });\n    }\n\n    if (action.type === actions.toggleSortBy) {\n      var columnId = action.columnId,\n          desc = action.desc,\n          multi = action.multi;\n      var allColumns = instance.allColumns,\n          disableMultiSort = instance.disableMultiSort,\n          disableSortRemove = instance.disableSortRemove,\n          disableMultiRemove = instance.disableMultiRemove,\n          _instance$maxMultiSor = instance.maxMultiSortColCount,\n          maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;\n      var _sortBy2 = state.sortBy; // Find the column for this columnId\n\n      var column = allColumns.find(function (d) {\n        return d.id === columnId;\n      });\n      var sortDescFirst = column.sortDescFirst; // Find any existing sortBy for this column\n\n      var existingSortBy = _sortBy2.find(function (d) {\n        return d.id === columnId;\n      });\n\n      var existingIndex = _sortBy2.findIndex(function (d) {\n        return d.id === columnId;\n      });\n\n      var hasDescDefined = typeof desc !== 'undefined' && desc !== null;\n      var _newSortBy = []; // What should we do with this sort action?\n\n      var sortAction;\n\n      if (!disableMultiSort && multi) {\n        if (existingSortBy) {\n          sortAction = 'toggle';\n        } else {\n          sortAction = 'add';\n        }\n      } else {\n        // Normal mode\n        if (existingIndex !== _sortBy2.length - 1 || _sortBy2.length !== 1) {\n          sortAction = 'replace';\n        } else if (existingSortBy) {\n          sortAction = 'toggle';\n        } else {\n          sortAction = 'replace';\n        }\n      } // Handle toggle states that will remove the sortBy\n\n\n      if (sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && ( // Must not be setting desc\n      multi ? !disableMultiRemove : true) && ( // If multi, don't allow if disableMultiRemove\n      existingSortBy && // Finally, detect if it should indeed be removed\n      existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {\n        sortAction = 'remove';\n      }\n\n      if (sortAction === 'replace') {\n        _newSortBy = [{\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst\n        }];\n      } else if (sortAction === 'add') {\n        _newSortBy = [].concat(_sortBy2, [{\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst\n        }]); // Take latest n columns\n\n        _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);\n      } else if (sortAction === 'toggle') {\n        // This flips (or sets) the\n        _newSortBy = _sortBy2.map(function (d) {\n          if (d.id === columnId) {\n            return _extends({}, d, {\n              desc: hasDescDefined ? desc : !existingSortBy.desc\n            });\n          }\n\n          return d;\n        });\n      } else if (sortAction === 'remove') {\n        _newSortBy = _sortBy2.filter(function (d) {\n          return d.id !== columnId;\n        });\n      }\n\n      return _extends({}, state, {\n        sortBy: _newSortBy\n      });\n    }\n  }\n\n  function useInstance$5(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        allColumns = instance.allColumns,\n        _instance$orderByFn = instance.orderByFn,\n        orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn,\n        userSortTypes = instance.sortTypes,\n        manualSortBy = instance.manualSortBy,\n        defaultCanSort = instance.defaultCanSort,\n        disableSortBy = instance.disableSortBy,\n        flatHeaders = instance.flatHeaders,\n        sortBy = instance.state.sortBy,\n        dispatch = instance.dispatch,\n        plugins = instance.plugins,\n        getHooks = instance.getHooks,\n        _instance$autoResetSo = instance.autoResetSortBy,\n        autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;\n    ensurePluginOrder(plugins, ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'], 'useSortBy');\n    var setSortBy = React.useCallback(function (sortBy) {\n      dispatch({\n        type: actions.setSortBy,\n        sortBy: sortBy\n      });\n    }, [dispatch]); // Updates sorting based on a columnId, desc flag and multi flag\n\n    var toggleSortBy = React.useCallback(function (columnId, desc, multi) {\n      dispatch({\n        type: actions.toggleSortBy,\n        columnId: columnId,\n        desc: desc,\n        multi: multi\n      });\n    }, [dispatch]); // use reference to avoid memory leak in #1608\n\n    var getInstance = useGetLatest(instance); // Add the getSortByToggleProps method to columns and headers\n\n    flatHeaders.forEach(function (column) {\n      var accessor = column.accessor,\n          defaultColumnCanSort = column.canSort,\n          columnDisableSortBy = column.disableSortBy,\n          id = column.id;\n      var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);\n      column.canSort = canSort;\n\n      if (column.canSort) {\n        column.toggleSortBy = function (desc, multi) {\n          return toggleSortBy(column.id, desc, multi);\n        };\n\n        column.clearSortBy = function () {\n          dispatch({\n            type: actions.clearSortBy,\n            columnId: column.id\n          });\n        };\n      }\n\n      column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {\n        instance: getInstance(),\n        column: column\n      });\n      var columnSort = sortBy.find(function (d) {\n        return d.id === id;\n      });\n      column.isSorted = !!columnSort;\n      column.sortedIndex = sortBy.findIndex(function (d) {\n        return d.id === id;\n      });\n      column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;\n    });\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualSortBy || !sortBy.length) {\n        return [rows, flatRows];\n      }\n\n      var sortedFlatRows = []; // Filter out sortBys that correspond to non existing columns\n\n      var availableSortBy = sortBy.filter(function (sort) {\n        return allColumns.find(function (col) {\n          return col.id === sort.id;\n        });\n      });\n\n      var sortData = function sortData(rows) {\n        // Use the orderByFn to compose multiple sortBy's together.\n        // This will also perform a stable sorting using the row index\n        // if needed.\n        var sortedData = orderByFn(rows, availableSortBy.map(function (sort) {\n          // Support custom sorting methods for each column\n          var column = allColumns.find(function (d) {\n            return d.id === sort.id;\n          });\n\n          if (!column) {\n            throw new Error(\"React-Table: Could not find a column with id: \" + sort.id + \" while sorting\");\n          }\n\n          var sortType = column.sortType; // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n\n          var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];\n\n          if (!sortMethod) {\n            throw new Error(\"React-Table: Could not find a valid sortType of '\" + sortType + \"' for column '\" + sort.id + \"'.\");\n          } // Return the correct sortFn.\n          // This function should always return in ascending order\n\n\n          return function (a, b) {\n            return sortMethod(a, b, sort.id, sort.desc);\n          };\n        }), // Map the directions\n        availableSortBy.map(function (sort) {\n          // Detect and use the sortInverted option\n          var column = allColumns.find(function (d) {\n            return d.id === sort.id;\n          });\n\n          if (column && column.sortInverted) {\n            return sort.desc;\n          }\n\n          return !sort.desc;\n        })); // If there are sub-rows, sort them\n\n        sortedData.forEach(function (row) {\n          sortedFlatRows.push(row);\n\n          if (!row.subRows || row.subRows.length === 0) {\n            return;\n          }\n\n          row.subRows = sortData(row.subRows);\n        });\n        return sortedData;\n      };\n\n      return [sortData(rows), sortedFlatRows];\n    }, [manualSortBy, sortBy, rows, flatRows, allColumns, orderByFn, userSortTypes]),\n        sortedRows = _React$useMemo[0],\n        sortedFlatRows = _React$useMemo[1];\n\n    var getAutoResetSortBy = useGetLatest(autoResetSortBy);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetSortBy()) {\n        dispatch({\n          type: actions.resetSortBy\n        });\n      }\n    }, [manualSortBy ? null : data]);\n    Object.assign(instance, {\n      preSortedRows: rows,\n      preSortedFlatRows: flatRows,\n      sortedRows: sortedRows,\n      sortedFlatRows: sortedFlatRows,\n      rows: sortedRows,\n      flatRows: sortedFlatRows,\n      setSortBy: setSortBy,\n      toggleSortBy: toggleSortBy\n    });\n  }\n\n  function defaultOrderByFn(arr, funcs, dirs) {\n    return [].concat(arr).sort(function (rowA, rowB) {\n      for (var i = 0; i < funcs.length; i += 1) {\n        var sortFn = funcs[i];\n        var desc = dirs[i] === false || dirs[i] === 'desc';\n        var sortInt = sortFn(rowA, rowB);\n\n        if (sortInt !== 0) {\n          return desc ? -sortInt : sortInt;\n        }\n      }\n\n      return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;\n    });\n  }\n\n  var pluginName = 'usePagination'; // Actions\n\n  actions.resetPage = 'resetPage';\n  actions.gotoPage = 'gotoPage';\n  actions.setPageSize = 'setPageSize';\n\n  var usePagination = function usePagination(hooks) {\n    hooks.stateReducers.push(reducer$6);\n    hooks.useInstance.push(useInstance$6);\n  };\n\n  usePagination.pluginName = pluginName;\n\n  function reducer$6(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        pageSize: 10,\n        pageIndex: 0\n      }, state);\n    }\n\n    if (action.type === actions.resetPage) {\n      return _extends({}, state, {\n        pageIndex: instance.initialState.pageIndex || 0\n      });\n    }\n\n    if (action.type === actions.gotoPage) {\n      var pageCount = instance.pageCount,\n          page = instance.page;\n      var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);\n      var canNavigate = false;\n\n      if (newPageIndex > state.pageIndex) {\n        // next page\n        canNavigate = pageCount === -1 ? page.length >= state.pageSize : newPageIndex < pageCount;\n      } else if (newPageIndex < state.pageIndex) {\n        // prev page\n        canNavigate = newPageIndex > -1;\n      }\n\n      if (!canNavigate) {\n        return state;\n      }\n\n      return _extends({}, state, {\n        pageIndex: newPageIndex\n      });\n    }\n\n    if (action.type === actions.setPageSize) {\n      var pageSize = action.pageSize;\n      var topRowIndex = state.pageSize * state.pageIndex;\n      var pageIndex = Math.floor(topRowIndex / pageSize);\n      return _extends({}, state, {\n        pageIndex: pageIndex,\n        pageSize: pageSize\n      });\n    }\n  }\n\n  function useInstance$6(instance) {\n    var rows = instance.rows,\n        _instance$autoResetPa = instance.autoResetPage,\n        autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa,\n        _instance$manualExpan = instance.manualExpandedKey,\n        manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n        plugins = instance.plugins,\n        userPageCount = instance.pageCount,\n        _instance$paginateExp = instance.paginateExpandedRows,\n        paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n        _instance$expandSubRo = instance.expandSubRows,\n        expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n        _instance$state = instance.state,\n        pageSize = _instance$state.pageSize,\n        pageIndex = _instance$state.pageIndex,\n        expanded = _instance$state.expanded,\n        globalFilter = _instance$state.globalFilter,\n        filters = _instance$state.filters,\n        groupBy = _instance$state.groupBy,\n        sortBy = _instance$state.sortBy,\n        dispatch = instance.dispatch,\n        data = instance.data,\n        manualPagination = instance.manualPagination;\n    ensurePluginOrder(plugins, ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'], 'usePagination');\n    var getAutoResetPage = useGetLatest(autoResetPage);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetPage()) {\n        dispatch({\n          type: actions.resetPage\n        });\n      }\n    }, [dispatch, manualPagination ? null : data, globalFilter, filters, groupBy, sortBy]);\n    var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);\n    var pageOptions = React.useMemo(function () {\n      return pageCount > 0 ? [].concat(new Array(pageCount)).fill(null).map(function (d, i) {\n        return i;\n      }) : [];\n    }, [pageCount]);\n    var page = React.useMemo(function () {\n      var page;\n\n      if (manualPagination) {\n        page = rows;\n      } else {\n        var pageStart = pageSize * pageIndex;\n        var pageEnd = pageStart + pageSize;\n        page = rows.slice(pageStart, pageEnd);\n      }\n\n      if (paginateExpandedRows) {\n        return page;\n      }\n\n      return expandRows(page, {\n        manualExpandedKey: manualExpandedKey,\n        expanded: expanded,\n        expandSubRows: expandSubRows\n      });\n    }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);\n    var canPreviousPage = pageIndex > 0;\n    var canNextPage = pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1;\n    var gotoPage = React.useCallback(function (pageIndex) {\n      dispatch({\n        type: actions.gotoPage,\n        pageIndex: pageIndex\n      });\n    }, [dispatch]);\n    var previousPage = React.useCallback(function () {\n      return gotoPage(function (old) {\n        return old - 1;\n      });\n    }, [gotoPage]);\n    var nextPage = React.useCallback(function () {\n      return gotoPage(function (old) {\n        return old + 1;\n      });\n    }, [gotoPage]);\n    var setPageSize = React.useCallback(function (pageSize) {\n      dispatch({\n        type: actions.setPageSize,\n        pageSize: pageSize\n      });\n    }, [dispatch]);\n    Object.assign(instance, {\n      pageOptions: pageOptions,\n      pageCount: pageCount,\n      page: page,\n      canPreviousPage: canPreviousPage,\n      canNextPage: canNextPage,\n      gotoPage: gotoPage,\n      previousPage: previousPage,\n      nextPage: nextPage,\n      setPageSize: setPageSize\n    });\n  }\n\n  actions.resetPivot = 'resetPivot';\n  actions.togglePivot = 'togglePivot';\n\n  var _UNSTABLE_usePivotColumns = function _UNSTABLE_usePivotColumns(hooks) {\n    hooks.getPivotToggleProps = [defaultGetPivotToggleProps];\n    hooks.stateReducers.push(reducer$7);\n    hooks.useInstanceAfterData.push(useInstanceAfterData);\n    hooks.allColumns.push(allColumns);\n    hooks.accessValue.push(accessValue);\n    hooks.materializedColumns.push(materializedColumns);\n    hooks.materializedColumnsDeps.push(materializedColumnsDeps);\n    hooks.visibleColumns.push(visibleColumns$1);\n    hooks.visibleColumnsDeps.push(visibleColumnsDeps);\n    hooks.useInstance.push(useInstance$7);\n    hooks.prepareRow.push(prepareRow$2);\n  };\n\n  _UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns';\n  var defaultPivotColumns = [];\n\n  var defaultGetPivotToggleProps = function defaultGetPivotToggleProps(props, _ref) {\n    var header = _ref.header;\n    return [props, {\n      onClick: header.canPivot ? function (e) {\n        e.persist();\n        header.togglePivot();\n      } : undefined,\n      style: {\n        cursor: header.canPivot ? 'pointer' : undefined\n      },\n      title: 'Toggle Pivot'\n    }];\n  }; // Reducer\n\n\n  function reducer$7(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        pivotColumns: defaultPivotColumns\n      }, state);\n    }\n\n    if (action.type === actions.resetPivot) {\n      return _extends({}, state, {\n        pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns\n      });\n    }\n\n    if (action.type === actions.togglePivot) {\n      var columnId = action.columnId,\n          setPivot = action.value;\n      var resolvedPivot = typeof setPivot !== 'undefined' ? setPivot : !state.pivotColumns.includes(columnId);\n\n      if (resolvedPivot) {\n        return _extends({}, state, {\n          pivotColumns: [].concat(state.pivotColumns, [columnId])\n        });\n      }\n\n      return _extends({}, state, {\n        pivotColumns: state.pivotColumns.filter(function (d) {\n          return d !== columnId;\n        })\n      });\n    }\n  }\n\n  function useInstanceAfterData(instance) {\n    instance.allColumns.forEach(function (column) {\n      column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n    });\n  }\n\n  function allColumns(columns, _ref2) {\n    var instance = _ref2.instance;\n    columns.forEach(function (column) {\n      column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n      column.uniqueValues = new Set();\n    });\n    return columns;\n  }\n\n  function accessValue(value, _ref3) {\n    var column = _ref3.column;\n\n    if (column.uniqueValues && typeof value !== 'undefined') {\n      column.uniqueValues.add(value);\n    }\n\n    return value;\n  }\n\n  function materializedColumns(materialized, _ref4) {\n    var instance = _ref4.instance;\n    var allColumns = instance.allColumns,\n        state = instance.state;\n\n    if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n      return materialized;\n    }\n\n    var pivotColumns = state.pivotColumns.map(function (id) {\n      return allColumns.find(function (d) {\n        return d.id === id;\n      });\n    }).filter(Boolean);\n    var sourceColumns = allColumns.filter(function (d) {\n      return !d.isPivotSource && !state.groupBy.includes(d.id) && !state.pivotColumns.includes(d.id);\n    });\n\n    var buildPivotColumns = function buildPivotColumns(depth, parent, pivotFilters) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      if (pivotFilters === void 0) {\n        pivotFilters = [];\n      }\n\n      var pivotColumn = pivotColumns[depth];\n\n      if (!pivotColumn) {\n        return sourceColumns.map(function (sourceColumn) {\n          // TODO: We could offer support here for renesting pivoted\n          // columns inside copies of their header groups. For now,\n          // that seems like it would be (1) overkill on nesting, considering\n          // you already get nesting for every pivot level and (2)\n          // really hard. :)\n          return _extends({}, sourceColumn, {\n            canPivot: false,\n            isPivoted: true,\n            parent: parent,\n            depth: depth,\n            id: \"\" + (parent ? parent.id + \".\" + sourceColumn.id : sourceColumn.id),\n            accessor: function accessor(originalRow, i, row) {\n              if (pivotFilters.every(function (filter) {\n                return filter(row);\n              })) {\n                return row.values[sourceColumn.id];\n              }\n            }\n          });\n        });\n      }\n\n      var uniqueValues = Array.from(pivotColumn.uniqueValues).sort();\n      return uniqueValues.map(function (uniqueValue) {\n        var columnGroup = _extends({}, pivotColumn, {\n          Header: pivotColumn.PivotHeader || typeof pivotColumn.header === 'string' ? pivotColumn.Header + \": \" + uniqueValue : uniqueValue,\n          isPivotGroup: true,\n          parent: parent,\n          depth: depth,\n          id: parent ? parent.id + \".\" + pivotColumn.id + \".\" + uniqueValue : pivotColumn.id + \".\" + uniqueValue,\n          pivotValue: uniqueValue\n        });\n\n        columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [].concat(pivotFilters, [function (row) {\n          return row.values[pivotColumn.id] === uniqueValue;\n        }]));\n        return columnGroup;\n      });\n    };\n\n    var newMaterialized = flattenColumns(buildPivotColumns());\n    return [].concat(materialized, newMaterialized);\n  }\n\n  function materializedColumnsDeps(deps, _ref5) {\n    var _ref5$instance$state = _ref5.instance.state,\n        pivotColumns = _ref5$instance$state.pivotColumns,\n        groupBy = _ref5$instance$state.groupBy;\n    return [].concat(deps, [pivotColumns, groupBy]);\n  }\n\n  function visibleColumns$1(visibleColumns, _ref6) {\n    var state = _ref6.instance.state;\n    visibleColumns = visibleColumns.filter(function (d) {\n      return !d.isPivotSource;\n    });\n\n    if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n      visibleColumns = visibleColumns.filter(function (column) {\n        return column.isGrouped || column.isPivoted;\n      });\n    }\n\n    return visibleColumns;\n  }\n\n  function visibleColumnsDeps(deps, _ref7) {\n    var instance = _ref7.instance;\n    return [].concat(deps, [instance.state.pivotColumns, instance.state.groupBy]);\n  }\n\n  function useInstance$7(instance) {\n    var columns = instance.columns,\n        allColumns = instance.allColumns,\n        flatHeaders = instance.flatHeaders,\n        getHooks = instance.getHooks,\n        plugins = instance.plugins,\n        dispatch = instance.dispatch,\n        _instance$autoResetPi = instance.autoResetPivot,\n        autoResetPivot = _instance$autoResetPi === void 0 ? true : _instance$autoResetPi,\n        manaulPivot = instance.manaulPivot,\n        disablePivot = instance.disablePivot,\n        defaultCanPivot = instance.defaultCanPivot;\n    ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns');\n    var getInstance = useGetLatest(instance);\n    allColumns.forEach(function (column) {\n      var accessor = column.accessor,\n          defaultColumnPivot = column.defaultPivot,\n          columnDisablePivot = column.disablePivot;\n      column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : undefined, disablePivot === true ? false : undefined, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);\n\n      if (column.canPivot) {\n        column.togglePivot = function () {\n          return instance.togglePivot(column.id);\n        };\n      }\n\n      column.Aggregated = column.Aggregated || column.Cell;\n    });\n\n    var togglePivot = function togglePivot(columnId, value) {\n      dispatch({\n        type: actions.togglePivot,\n        columnId: columnId,\n        value: value\n      });\n    };\n\n    flatHeaders.forEach(function (header) {\n      header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {\n        instance: getInstance(),\n        header: header\n      });\n    });\n    var getAutoResetPivot = useGetLatest(autoResetPivot);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetPivot()) {\n        dispatch({\n          type: actions.resetPivot\n        });\n      }\n    }, [dispatch, manaulPivot ? null : columns]);\n    Object.assign(instance, {\n      togglePivot: togglePivot\n    });\n  }\n\n  function prepareRow$2(row) {\n    row.allCells.forEach(function (cell) {\n      // Grouped cells are in the pivotColumns and the pivot cell for the row\n      cell.isPivoted = cell.column.isPivoted;\n    });\n  }\n\n  var pluginName$1 = 'useRowSelect'; // Actions\n\n  actions.resetSelectedRows = 'resetSelectedRows';\n  actions.toggleAllRowsSelected = 'toggleAllRowsSelected';\n  actions.toggleRowSelected = 'toggleRowSelected';\n  actions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected';\n\n  var useRowSelect = function useRowSelect(hooks) {\n    hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];\n    hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];\n    hooks.getToggleAllPageRowsSelectedProps = [defaultGetToggleAllPageRowsSelectedProps];\n    hooks.stateReducers.push(reducer$8);\n    hooks.useInstance.push(useInstance$8);\n    hooks.prepareRow.push(prepareRow$3);\n  };\n\n  useRowSelect.pluginName = pluginName$1;\n\n  var defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps(props, _ref) {\n    var instance = _ref.instance,\n        row = _ref.row;\n    var _instance$manualRowSe = instance.manualRowSelectedKey,\n        manualRowSelectedKey = _instance$manualRowSe === void 0 ? 'isSelected' : _instance$manualRowSe;\n    var checked = false;\n\n    if (row.original && row.original[manualRowSelectedKey]) {\n      checked = true;\n    } else {\n      checked = row.isSelected;\n    }\n\n    return [props, {\n      onChange: function onChange(e) {\n        row.toggleRowSelected(e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected\n    }];\n  };\n\n  var defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps(props, _ref2) {\n    var instance = _ref2.instance;\n    return [props, {\n      onChange: function onChange(e) {\n        instance.toggleAllRowsSelected(e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: instance.isAllRowsSelected,\n      title: 'Toggle All Rows Selected',\n      indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)\n    }];\n  };\n\n  var defaultGetToggleAllPageRowsSelectedProps = function defaultGetToggleAllPageRowsSelectedProps(props, _ref3) {\n    var instance = _ref3.instance;\n    return [props, {\n      onChange: function onChange(e) {\n        instance.toggleAllPageRowsSelected(e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: instance.isAllPageRowsSelected,\n      title: 'Toggle All Current Page Rows Selected',\n      indeterminate: Boolean(!instance.isAllPageRowsSelected && instance.page.some(function (_ref4) {\n        var id = _ref4.id;\n        return instance.state.selectedRowIds[id];\n      }))\n    }];\n  }; // eslint-disable-next-line max-params\n\n\n  function reducer$8(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        selectedRowIds: {}\n      }, state);\n    }\n\n    if (action.type === actions.resetSelectedRows) {\n      return _extends({}, state, {\n        selectedRowIds: instance.initialState.selectedRowIds || {}\n      });\n    }\n\n    if (action.type === actions.toggleAllRowsSelected) {\n      var setSelected = action.value;\n      var isAllRowsSelected = instance.isAllRowsSelected,\n          rowsById = instance.rowsById,\n          _instance$nonGroupedR = instance.nonGroupedRowsById,\n          nonGroupedRowsById = _instance$nonGroupedR === void 0 ? rowsById : _instance$nonGroupedR;\n      var selectAll = typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected; // Only remove/add the rows that are visible on the screen\n      //  Leave all the other rows that are selected alone.\n\n      var selectedRowIds = Object.assign({}, state.selectedRowIds);\n\n      if (selectAll) {\n        Object.keys(nonGroupedRowsById).forEach(function (rowId) {\n          selectedRowIds[rowId] = true;\n        });\n      } else {\n        Object.keys(nonGroupedRowsById).forEach(function (rowId) {\n          delete selectedRowIds[rowId];\n        });\n      }\n\n      return _extends({}, state, {\n        selectedRowIds: selectedRowIds\n      });\n    }\n\n    if (action.type === actions.toggleRowSelected) {\n      var id = action.id,\n          _setSelected = action.value;\n      var _rowsById = instance.rowsById,\n          _instance$selectSubRo = instance.selectSubRows,\n          selectSubRows = _instance$selectSubRo === void 0 ? true : _instance$selectSubRo,\n          getSubRows = instance.getSubRows;\n      var isSelected = state.selectedRowIds[id];\n      var shouldExist = typeof _setSelected !== 'undefined' ? _setSelected : !isSelected;\n\n      if (isSelected === shouldExist) {\n        return state;\n      }\n\n      var newSelectedRowIds = _extends({}, state.selectedRowIds);\n\n      var handleRowById = function handleRowById(id) {\n        var row = _rowsById[id];\n\n        if (row) {\n          if (!row.isGrouped) {\n            if (shouldExist) {\n              newSelectedRowIds[id] = true;\n            } else {\n              delete newSelectedRowIds[id];\n            }\n          }\n\n          if (selectSubRows && getSubRows(row)) {\n            return getSubRows(row).forEach(function (row) {\n              return handleRowById(row.id);\n            });\n          }\n        }\n      };\n\n      handleRowById(id);\n      return _extends({}, state, {\n        selectedRowIds: newSelectedRowIds\n      });\n    }\n\n    if (action.type === actions.toggleAllPageRowsSelected) {\n      var _setSelected2 = action.value;\n\n      var page = instance.page,\n          _rowsById2 = instance.rowsById,\n          _instance$selectSubRo2 = instance.selectSubRows,\n          _selectSubRows = _instance$selectSubRo2 === void 0 ? true : _instance$selectSubRo2,\n          isAllPageRowsSelected = instance.isAllPageRowsSelected,\n          _getSubRows = instance.getSubRows;\n\n      var _selectAll = typeof _setSelected2 !== 'undefined' ? _setSelected2 : !isAllPageRowsSelected;\n\n      var _newSelectedRowIds = _extends({}, state.selectedRowIds);\n\n      var _handleRowById = function _handleRowById(id) {\n        var row = _rowsById2[id];\n\n        if (!row.isGrouped) {\n          if (_selectAll) {\n            _newSelectedRowIds[id] = true;\n          } else {\n            delete _newSelectedRowIds[id];\n          }\n        }\n\n        if (_selectSubRows && _getSubRows(row)) {\n          return _getSubRows(row).forEach(function (row) {\n            return _handleRowById(row.id);\n          });\n        }\n      };\n\n      page.forEach(function (row) {\n        return _handleRowById(row.id);\n      });\n      return _extends({}, state, {\n        selectedRowIds: _newSelectedRowIds\n      });\n    }\n\n    return state;\n  }\n\n  function useInstance$8(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        getHooks = instance.getHooks,\n        plugins = instance.plugins,\n        rowsById = instance.rowsById,\n        _instance$nonGroupedR2 = instance.nonGroupedRowsById,\n        nonGroupedRowsById = _instance$nonGroupedR2 === void 0 ? rowsById : _instance$nonGroupedR2,\n        _instance$autoResetSe = instance.autoResetSelectedRows,\n        autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe,\n        selectedRowIds = instance.state.selectedRowIds,\n        _instance$selectSubRo3 = instance.selectSubRows,\n        selectSubRows = _instance$selectSubRo3 === void 0 ? true : _instance$selectSubRo3,\n        dispatch = instance.dispatch,\n        page = instance.page,\n        getSubRows = instance.getSubRows;\n    ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'], 'useRowSelect');\n    var selectedFlatRows = React.useMemo(function () {\n      var selectedFlatRows = [];\n      rows.forEach(function (row) {\n        var isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds, getSubRows) : !!selectedRowIds[row.id];\n        row.isSelected = !!isSelected;\n        row.isSomeSelected = isSelected === null;\n\n        if (isSelected) {\n          selectedFlatRows.push(row);\n        }\n      });\n      return selectedFlatRows;\n    }, [rows, selectSubRows, selectedRowIds, getSubRows]);\n    var isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);\n    var isAllPageRowsSelected = isAllRowsSelected;\n\n    if (isAllRowsSelected) {\n      if (Object.keys(nonGroupedRowsById).some(function (id) {\n        return !selectedRowIds[id];\n      })) {\n        isAllRowsSelected = false;\n      }\n    }\n\n    if (!isAllRowsSelected) {\n      if (page && page.length && page.some(function (_ref5) {\n        var id = _ref5.id;\n        return !selectedRowIds[id];\n      })) {\n        isAllPageRowsSelected = false;\n      }\n    }\n\n    var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetSelectedRows()) {\n        dispatch({\n          type: actions.resetSelectedRows\n        });\n      }\n    }, [dispatch, data]);\n    var toggleAllRowsSelected = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleAllRowsSelected,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleAllPageRowsSelected = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleAllPageRowsSelected,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleRowSelected = React.useCallback(function (id, value) {\n      return dispatch({\n        type: actions.toggleRowSelected,\n        id: id,\n        value: value\n      });\n    }, [dispatch]);\n    var getInstance = useGetLatest(instance);\n    var getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {\n      instance: getInstance()\n    });\n    var getToggleAllPageRowsSelectedProps = makePropGetter(getHooks().getToggleAllPageRowsSelectedProps, {\n      instance: getInstance()\n    });\n    Object.assign(instance, {\n      selectedFlatRows: selectedFlatRows,\n      isAllRowsSelected: isAllRowsSelected,\n      isAllPageRowsSelected: isAllPageRowsSelected,\n      toggleRowSelected: toggleRowSelected,\n      toggleAllRowsSelected: toggleAllRowsSelected,\n      getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,\n      getToggleAllPageRowsSelectedProps: getToggleAllPageRowsSelectedProps,\n      toggleAllPageRowsSelected: toggleAllPageRowsSelected\n    });\n  }\n\n  function prepareRow$3(row, _ref6) {\n    var instance = _ref6.instance;\n\n    row.toggleRowSelected = function (set) {\n      return instance.toggleRowSelected(row.id, set);\n    };\n\n    row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {\n      instance: instance,\n      row: row\n    });\n  }\n\n  function getRowIsSelected(row, selectedRowIds, getSubRows) {\n    if (selectedRowIds[row.id]) {\n      return true;\n    }\n\n    var subRows = getSubRows(row);\n\n    if (subRows && subRows.length) {\n      var allChildrenSelected = true;\n      var someSelected = false;\n      subRows.forEach(function (subRow) {\n        // Bail out early if we know both of these\n        if (someSelected && !allChildrenSelected) {\n          return;\n        }\n\n        if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n          someSelected = true;\n        } else {\n          allChildrenSelected = false;\n        }\n      });\n      return allChildrenSelected ? true : someSelected ? null : false;\n    }\n\n    return false;\n  }\n\n  var defaultInitialRowStateAccessor = function defaultInitialRowStateAccessor(row) {\n    return {};\n  };\n\n  var defaultInitialCellStateAccessor = function defaultInitialCellStateAccessor(cell) {\n    return {};\n  }; // Actions\n\n\n  actions.setRowState = 'setRowState';\n  actions.setCellState = 'setCellState';\n  actions.resetRowState = 'resetRowState';\n\n  var useRowState = function useRowState(hooks) {\n    hooks.stateReducers.push(reducer$9);\n    hooks.useInstance.push(useInstance$9);\n    hooks.prepareRow.push(prepareRow$4);\n  };\n\n  useRowState.pluginName = 'useRowState';\n\n  function reducer$9(state, action, previousState, instance) {\n    var _instance$initialRowS = instance.initialRowStateAccessor,\n        initialRowStateAccessor = _instance$initialRowS === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS,\n        _instance$initialCell = instance.initialCellStateAccessor,\n        initialCellStateAccessor = _instance$initialCell === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell,\n        rowsById = instance.rowsById;\n\n    if (action.type === actions.init) {\n      return _extends({\n        rowState: {}\n      }, state);\n    }\n\n    if (action.type === actions.resetRowState) {\n      return _extends({}, state, {\n        rowState: instance.initialState.rowState || {}\n      });\n    }\n\n    if (action.type === actions.setRowState) {\n      var _extends2;\n\n      var rowId = action.rowId,\n          value = action.value;\n      var oldRowState = typeof state.rowState[rowId] !== 'undefined' ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId]);\n      return _extends({}, state, {\n        rowState: _extends({}, state.rowState, (_extends2 = {}, _extends2[rowId] = functionalUpdate(value, oldRowState), _extends2))\n      });\n    }\n\n    if (action.type === actions.setCellState) {\n      var _oldRowState$cellStat, _rowsById$_rowId, _rowsById$_rowId$cell, _extends3, _extends4;\n\n      var _rowId = action.rowId,\n          columnId = action.columnId,\n          _value = action.value;\n\n      var _oldRowState = typeof state.rowState[_rowId] !== 'undefined' ? state.rowState[_rowId] : initialRowStateAccessor(rowsById[_rowId]);\n\n      var oldCellState = typeof (_oldRowState == null ? void 0 : (_oldRowState$cellStat = _oldRowState.cellState) == null ? void 0 : _oldRowState$cellStat[columnId]) !== 'undefined' ? _oldRowState.cellState[columnId] : initialCellStateAccessor((_rowsById$_rowId = rowsById[_rowId]) == null ? void 0 : (_rowsById$_rowId$cell = _rowsById$_rowId.cells) == null ? void 0 : _rowsById$_rowId$cell.find(function (cell) {\n        return cell.column.id === columnId;\n      }));\n      return _extends({}, state, {\n        rowState: _extends({}, state.rowState, (_extends4 = {}, _extends4[_rowId] = _extends({}, _oldRowState, {\n          cellState: _extends({}, _oldRowState.cellState || {}, (_extends3 = {}, _extends3[columnId] = functionalUpdate(_value, oldCellState), _extends3))\n        }), _extends4))\n      });\n    }\n  }\n\n  function useInstance$9(instance) {\n    var _instance$autoResetRo = instance.autoResetRowState,\n        autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo,\n        data = instance.data,\n        dispatch = instance.dispatch;\n    var setRowState = React.useCallback(function (rowId, value) {\n      return dispatch({\n        type: actions.setRowState,\n        rowId: rowId,\n        value: value\n      });\n    }, [dispatch]);\n    var setCellState = React.useCallback(function (rowId, columnId, value) {\n      return dispatch({\n        type: actions.setCellState,\n        rowId: rowId,\n        columnId: columnId,\n        value: value\n      });\n    }, [dispatch]);\n    var getAutoResetRowState = useGetLatest(autoResetRowState);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetRowState()) {\n        dispatch({\n          type: actions.resetRowState\n        });\n      }\n    }, [data]);\n    Object.assign(instance, {\n      setRowState: setRowState,\n      setCellState: setCellState\n    });\n  }\n\n  function prepareRow$4(row, _ref) {\n    var instance = _ref.instance;\n    var _instance$initialRowS2 = instance.initialRowStateAccessor,\n        initialRowStateAccessor = _instance$initialRowS2 === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS2,\n        _instance$initialCell2 = instance.initialCellStateAccessor,\n        initialCellStateAccessor = _instance$initialCell2 === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell2,\n        rowState = instance.state.rowState;\n\n    if (row) {\n      row.state = typeof rowState[row.id] !== 'undefined' ? rowState[row.id] : initialRowStateAccessor(row);\n\n      row.setState = function (updater) {\n        return instance.setRowState(row.id, updater);\n      };\n\n      row.cells.forEach(function (cell) {\n        if (!row.state.cellState) {\n          row.state.cellState = {};\n        }\n\n        cell.state = typeof row.state.cellState[cell.column.id] !== 'undefined' ? row.state.cellState[cell.column.id] : initialCellStateAccessor(cell);\n\n        cell.setState = function (updater) {\n          return instance.setCellState(row.id, cell.column.id, updater);\n        };\n      });\n    }\n  }\n\n  actions.resetColumnOrder = 'resetColumnOrder';\n  actions.setColumnOrder = 'setColumnOrder';\n\n  var useColumnOrder = function useColumnOrder(hooks) {\n    hooks.stateReducers.push(reducer$a);\n    hooks.visibleColumnsDeps.push(function (deps, _ref) {\n      var instance = _ref.instance;\n      return [].concat(deps, [instance.state.columnOrder]);\n    });\n    hooks.visibleColumns.push(visibleColumns$2);\n    hooks.useInstance.push(useInstance$a);\n  };\n\n  useColumnOrder.pluginName = 'useColumnOrder';\n\n  function reducer$a(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        columnOrder: []\n      }, state);\n    }\n\n    if (action.type === actions.resetColumnOrder) {\n      return _extends({}, state, {\n        columnOrder: instance.initialState.columnOrder || []\n      });\n    }\n\n    if (action.type === actions.setColumnOrder) {\n      return _extends({}, state, {\n        columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)\n      });\n    }\n  }\n\n  function visibleColumns$2(columns, _ref2) {\n    var columnOrder = _ref2.instance.state.columnOrder; // If there is no order, return the normal columns\n\n    if (!columnOrder || !columnOrder.length) {\n      return columns;\n    }\n\n    var columnOrderCopy = [].concat(columnOrder); // If there is an order, make a copy of the columns\n\n    var columnsCopy = [].concat(columns); // And make a new ordered array of the columns\n\n    var columnsInOrder = []; // Loop over the columns and place them in order into the new array\n\n    var _loop = function _loop() {\n      var targetColumnId = columnOrderCopy.shift();\n      var foundIndex = columnsCopy.findIndex(function (d) {\n        return d.id === targetColumnId;\n      });\n\n      if (foundIndex > -1) {\n        columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);\n      }\n    };\n\n    while (columnsCopy.length && columnOrderCopy.length) {\n      _loop();\n    } // If there are any columns left, add them to the end\n\n\n    return [].concat(columnsInOrder, columnsCopy);\n  }\n\n  function useInstance$a(instance) {\n    var dispatch = instance.dispatch;\n    instance.setColumnOrder = React.useCallback(function (columnOrder) {\n      return dispatch({\n        type: actions.setColumnOrder,\n        columnOrder: columnOrder\n      });\n    }, [dispatch]);\n  }\n\n  defaultColumn.canResize = true; // Actions\n\n  actions.columnStartResizing = 'columnStartResizing';\n  actions.columnResizing = 'columnResizing';\n  actions.columnDoneResizing = 'columnDoneResizing';\n  actions.resetResize = 'resetResize';\n\n  var useResizeColumns = function useResizeColumns(hooks) {\n    hooks.getResizerProps = [defaultGetResizerProps];\n    hooks.getHeaderProps.push({\n      style: {\n        position: 'relative'\n      }\n    });\n    hooks.stateReducers.push(reducer$b);\n    hooks.useInstance.push(useInstance$b);\n    hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);\n  };\n\n  var defaultGetResizerProps = function defaultGetResizerProps(props, _ref) {\n    var instance = _ref.instance,\n        header = _ref.header;\n    var dispatch = instance.dispatch;\n\n    var onResizeStart = function onResizeStart(e, header) {\n      var isTouchEvent = false;\n\n      if (e.type === 'touchstart') {\n        // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n        if (e.touches && e.touches.length > 1) {\n          return;\n        }\n\n        isTouchEvent = true;\n      }\n\n      var headersToResize = getLeafHeaders(header);\n      var headerIdWidths = headersToResize.map(function (d) {\n        return [d.id, d.totalWidth];\n      });\n      var clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;\n      var raf;\n      var mostRecentClientX;\n\n      var dispatchEnd = function dispatchEnd() {\n        window.cancelAnimationFrame(raf);\n        raf = null;\n        dispatch({\n          type: actions.columnDoneResizing\n        });\n      };\n\n      var dispatchMove = function dispatchMove() {\n        window.cancelAnimationFrame(raf);\n        raf = null;\n        dispatch({\n          type: actions.columnResizing,\n          clientX: mostRecentClientX\n        });\n      };\n\n      var scheduleDispatchMoveOnNextAnimationFrame = function scheduleDispatchMoveOnNextAnimationFrame(clientXPos) {\n        mostRecentClientX = clientXPos;\n\n        if (!raf) {\n          raf = window.requestAnimationFrame(dispatchMove);\n        }\n      };\n\n      var handlersAndEvents = {\n        mouse: {\n          moveEvent: 'mousemove',\n          moveHandler: function moveHandler(e) {\n            return scheduleDispatchMoveOnNextAnimationFrame(e.clientX);\n          },\n          upEvent: 'mouseup',\n          upHandler: function upHandler(e) {\n            document.removeEventListener('mousemove', handlersAndEvents.mouse.moveHandler);\n            document.removeEventListener('mouseup', handlersAndEvents.mouse.upHandler);\n            dispatchEnd();\n          }\n        },\n        touch: {\n          moveEvent: 'touchmove',\n          moveHandler: function moveHandler(e) {\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n\n            scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX);\n            return false;\n          },\n          upEvent: 'touchend',\n          upHandler: function upHandler(e) {\n            document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);\n            document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);\n            dispatchEnd();\n          }\n        }\n      };\n      var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;\n      var passiveIfSupported = passiveEventSupported() ? {\n        passive: false\n      } : false;\n      document.addEventListener(events.moveEvent, events.moveHandler, passiveIfSupported);\n      document.addEventListener(events.upEvent, events.upHandler, passiveIfSupported);\n      dispatch({\n        type: actions.columnStartResizing,\n        columnId: header.id,\n        columnWidth: header.totalWidth,\n        headerIdWidths: headerIdWidths,\n        clientX: clientX\n      });\n    };\n\n    return [props, {\n      onMouseDown: function onMouseDown(e) {\n        return e.persist() || onResizeStart(e, header);\n      },\n      onTouchStart: function onTouchStart(e) {\n        return e.persist() || onResizeStart(e, header);\n      },\n      style: {\n        cursor: 'col-resize'\n      },\n      draggable: false,\n      role: 'separator'\n    }];\n  };\n\n  useResizeColumns.pluginName = 'useResizeColumns';\n\n  function reducer$b(state, action) {\n    if (action.type === actions.init) {\n      return _extends({\n        columnResizing: {\n          columnWidths: {}\n        }\n      }, state);\n    }\n\n    if (action.type === actions.resetResize) {\n      return _extends({}, state, {\n        columnResizing: {\n          columnWidths: {}\n        }\n      });\n    }\n\n    if (action.type === actions.columnStartResizing) {\n      var clientX = action.clientX,\n          columnId = action.columnId,\n          columnWidth = action.columnWidth,\n          headerIdWidths = action.headerIdWidths;\n      return _extends({}, state, {\n        columnResizing: _extends({}, state.columnResizing, {\n          startX: clientX,\n          headerIdWidths: headerIdWidths,\n          columnWidth: columnWidth,\n          isResizingColumn: columnId\n        })\n      });\n    }\n\n    if (action.type === actions.columnResizing) {\n      var _clientX = action.clientX;\n\n      var _state$columnResizing = state.columnResizing,\n          startX = _state$columnResizing.startX,\n          _columnWidth = _state$columnResizing.columnWidth,\n          _state$columnResizing2 = _state$columnResizing.headerIdWidths,\n          _headerIdWidths = _state$columnResizing2 === void 0 ? [] : _state$columnResizing2;\n\n      var deltaX = _clientX - startX;\n      var percentageDeltaX = deltaX / _columnWidth;\n      var newColumnWidths = {};\n\n      _headerIdWidths.forEach(function (_ref2) {\n        var headerId = _ref2[0],\n            headerWidth = _ref2[1];\n        newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);\n      });\n\n      return _extends({}, state, {\n        columnResizing: _extends({}, state.columnResizing, {\n          columnWidths: _extends({}, state.columnResizing.columnWidths, {}, newColumnWidths)\n        })\n      });\n    }\n\n    if (action.type === actions.columnDoneResizing) {\n      return _extends({}, state, {\n        columnResizing: _extends({}, state.columnResizing, {\n          startX: null,\n          isResizingColumn: null\n        })\n      });\n    }\n  }\n\n  var useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions(instance) {\n    var flatHeaders = instance.flatHeaders,\n        disableResizing = instance.disableResizing,\n        getHooks = instance.getHooks,\n        columnResizing = instance.state.columnResizing;\n    var getInstance = useGetLatest(instance);\n    flatHeaders.forEach(function (header) {\n      var canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);\n      header.canResize = canResize;\n      header.width = columnResizing.columnWidths[header.id] || header.originalWidth || header.width;\n      header.isResizing = columnResizing.isResizingColumn === header.id;\n\n      if (canResize) {\n        header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n          instance: getInstance(),\n          header: header\n        });\n      }\n    });\n  };\n\n  function useInstance$b(instance) {\n    var plugins = instance.plugins,\n        dispatch = instance.dispatch,\n        _instance$autoResetRe = instance.autoResetResize,\n        autoResetResize = _instance$autoResetRe === void 0 ? true : _instance$autoResetRe,\n        columns = instance.columns;\n    ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns');\n    var getAutoResetResize = useGetLatest(autoResetResize);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetResize()) {\n        dispatch({\n          type: actions.resetResize\n        });\n      }\n    }, [columns]);\n    var resetResizing = React.useCallback(function () {\n      return dispatch({\n        type: actions.resetResize\n      });\n    }, [dispatch]);\n    Object.assign(instance, {\n      resetResizing: resetResizing\n    });\n  }\n\n  function getLeafHeaders(header) {\n    var leafHeaders = [];\n\n    var recurseHeader = function recurseHeader(header) {\n      if (header.columns && header.columns.length) {\n        header.columns.map(recurseHeader);\n      }\n\n      leafHeaders.push(header);\n    };\n\n    recurseHeader(header);\n    return leafHeaders;\n  }\n\n  var cellStyles = {\n    position: 'absolute',\n    top: 0\n  };\n\n  var useAbsoluteLayout = function useAbsoluteLayout(hooks) {\n    hooks.getTableBodyProps.push(getRowStyles);\n    hooks.getRowProps.push(getRowStyles);\n    hooks.getHeaderGroupProps.push(getRowStyles);\n    hooks.getFooterGroupProps.push(getRowStyles);\n    hooks.getHeaderProps.push(function (props, _ref) {\n      var column = _ref.column;\n      return [props, {\n        style: _extends({}, cellStyles, {\n          left: column.totalLeft + \"px\",\n          width: column.totalWidth + \"px\"\n        })\n      }];\n    });\n    hooks.getCellProps.push(function (props, _ref2) {\n      var cell = _ref2.cell;\n      return [props, {\n        style: _extends({}, cellStyles, {\n          left: cell.column.totalLeft + \"px\",\n          width: cell.column.totalWidth + \"px\"\n        })\n      }];\n    });\n    hooks.getFooterProps.push(function (props, _ref3) {\n      var column = _ref3.column;\n      return [props, {\n        style: _extends({}, cellStyles, {\n          left: column.totalLeft + \"px\",\n          width: column.totalWidth + \"px\"\n        })\n      }];\n    });\n  };\n\n  useAbsoluteLayout.pluginName = 'useAbsoluteLayout';\n\n  var getRowStyles = function getRowStyles(props, _ref4) {\n    var instance = _ref4.instance;\n    return [props, {\n      style: {\n        position: 'relative',\n        width: instance.totalColumnsWidth + \"px\"\n      }\n    }];\n  };\n\n  var cellStyles$1 = {\n    display: 'inline-block',\n    boxSizing: 'border-box'\n  };\n\n  var getRowStyles$1 = function getRowStyles(props, _ref) {\n    var instance = _ref.instance;\n    return [props, {\n      style: {\n        display: 'flex',\n        width: instance.totalColumnsWidth + \"px\"\n      }\n    }];\n  };\n\n  var useBlockLayout = function useBlockLayout(hooks) {\n    hooks.getRowProps.push(getRowStyles$1);\n    hooks.getHeaderGroupProps.push(getRowStyles$1);\n    hooks.getFooterGroupProps.push(getRowStyles$1);\n    hooks.getHeaderProps.push(function (props, _ref2) {\n      var column = _ref2.column;\n      return [props, {\n        style: _extends({}, cellStyles$1, {\n          width: column.totalWidth + \"px\"\n        })\n      }];\n    });\n    hooks.getCellProps.push(function (props, _ref3) {\n      var cell = _ref3.cell;\n      return [props, {\n        style: _extends({}, cellStyles$1, {\n          width: cell.column.totalWidth + \"px\"\n        })\n      }];\n    });\n    hooks.getFooterProps.push(function (props, _ref4) {\n      var column = _ref4.column;\n      return [props, {\n        style: _extends({}, cellStyles$1, {\n          width: column.totalWidth + \"px\"\n        })\n      }];\n    });\n  };\n\n  useBlockLayout.pluginName = 'useBlockLayout';\n\n  function useFlexLayout(hooks) {\n    hooks.getTableProps.push(getTableProps);\n    hooks.getRowProps.push(getRowStyles$2);\n    hooks.getHeaderGroupProps.push(getRowStyles$2);\n    hooks.getFooterGroupProps.push(getRowStyles$2);\n    hooks.getHeaderProps.push(getHeaderProps);\n    hooks.getCellProps.push(getCellProps);\n    hooks.getFooterProps.push(getFooterProps);\n  }\n\n  useFlexLayout.pluginName = 'useFlexLayout';\n\n  var getTableProps = function getTableProps(props, _ref) {\n    var instance = _ref.instance;\n    return [props, {\n      style: {\n        minWidth: instance.totalColumnsMinWidth + \"px\"\n      }\n    }];\n  };\n\n  var getRowStyles$2 = function getRowStyles(props, _ref2) {\n    var instance = _ref2.instance;\n    return [props, {\n      style: {\n        display: 'flex',\n        flex: '1 0 auto',\n        minWidth: instance.totalColumnsMinWidth + \"px\"\n      }\n    }];\n  };\n\n  var getHeaderProps = function getHeaderProps(props, _ref3) {\n    var column = _ref3.column;\n    return [props, {\n      style: {\n        boxSizing: 'border-box',\n        flex: column.totalFlexWidth ? column.totalFlexWidth + \" 0 auto\" : undefined,\n        minWidth: column.totalMinWidth + \"px\",\n        width: column.totalWidth + \"px\"\n      }\n    }];\n  };\n\n  var getCellProps = function getCellProps(props, _ref4) {\n    var cell = _ref4.cell;\n    return [props, {\n      style: {\n        boxSizing: 'border-box',\n        flex: cell.column.totalFlexWidth + \" 0 auto\",\n        minWidth: cell.column.totalMinWidth + \"px\",\n        width: cell.column.totalWidth + \"px\"\n      }\n    }];\n  };\n\n  var getFooterProps = function getFooterProps(props, _ref5) {\n    var column = _ref5.column;\n    return [props, {\n      style: {\n        boxSizing: 'border-box',\n        flex: column.totalFlexWidth ? column.totalFlexWidth + \" 0 auto\" : undefined,\n        minWidth: column.totalMinWidth + \"px\",\n        width: column.totalWidth + \"px\"\n      }\n    }];\n  };\n\n  actions.columnStartResizing = 'columnStartResizing';\n  actions.columnResizing = 'columnResizing';\n  actions.columnDoneResizing = 'columnDoneResizing';\n  actions.resetResize = 'resetResize';\n\n  function useGridLayout(hooks) {\n    hooks.stateReducers.push(reducer$c);\n    hooks.getTableProps.push(getTableProps$1);\n    hooks.getHeaderProps.push(getHeaderProps$1);\n    hooks.getRowProps.push(getRowProps);\n  }\n\n  useGridLayout.pluginName = 'useGridLayout';\n\n  var getTableProps$1 = function getTableProps(props, _ref) {\n    var instance = _ref.instance;\n    var gridTemplateColumns = instance.visibleColumns.map(function (column) {\n      var _instance$state$colum;\n\n      if (instance.state.gridLayout.columnWidths[column.id]) return instance.state.gridLayout.columnWidths[column.id] + \"px\"; // When resizing, lock the width of all unset columns\n      // instead of using user-provided width or defaultColumn width,\n      // which could potentially be 'auto' or 'fr' units that don't scale linearly\n\n      if ((_instance$state$colum = instance.state.columnResizing) == null ? void 0 : _instance$state$colum.isResizingColumn) return instance.state.gridLayout.startWidths[column.id] + \"px\";\n      if (typeof column.width === 'number') return column.width + \"px\";\n      return column.width;\n    });\n    return [props, {\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: gridTemplateColumns.join(\" \")\n      }\n    }];\n  };\n\n  var getHeaderProps$1 = function getHeaderProps(props, _ref2) {\n    var column = _ref2.column;\n    return [props, {\n      id: \"header-cell-\" + column.id,\n      style: {\n        position: \"sticky\",\n        //enables a scroll wrapper to be placed around the table and have sticky headers\n        gridColumn: \"span \" + column.totalVisibleHeaderCount\n      }\n    }];\n  };\n\n  var getRowProps = function getRowProps(props, _ref3) {\n    var row = _ref3.row;\n\n    if (row.isExpanded) {\n      return [props, {\n        style: {\n          gridColumn: \"1 / \" + (row.cells.length + 1)\n        }\n      }];\n    }\n\n    return [props, {}];\n  };\n\n  function reducer$c(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        gridLayout: {\n          columnWidths: {}\n        }\n      }, state);\n    }\n\n    if (action.type === actions.resetResize) {\n      return _extends({}, state, {\n        gridLayout: {\n          columnWidths: {}\n        }\n      });\n    }\n\n    if (action.type === actions.columnStartResizing) {\n      var columnId = action.columnId,\n          headerIdWidths = action.headerIdWidths;\n      var columnWidth = getElementWidth(columnId);\n\n      if (columnWidth !== undefined) {\n        var startWidths = instance.visibleColumns.reduce(function (acc, column) {\n          var _extends2;\n\n          return _extends({}, acc, (_extends2 = {}, _extends2[column.id] = getElementWidth(column.id), _extends2));\n        }, {});\n        var minWidths = instance.visibleColumns.reduce(function (acc, column) {\n          var _extends3;\n\n          return _extends({}, acc, (_extends3 = {}, _extends3[column.id] = column.minWidth, _extends3));\n        }, {});\n        var maxWidths = instance.visibleColumns.reduce(function (acc, column) {\n          var _extends4;\n\n          return _extends({}, acc, (_extends4 = {}, _extends4[column.id] = column.maxWidth, _extends4));\n        }, {});\n        var headerIdGridWidths = headerIdWidths.map(function (_ref4) {\n          var headerId = _ref4[0];\n          return [headerId, getElementWidth(headerId)];\n        });\n        return _extends({}, state, {\n          gridLayout: _extends({}, state.gridLayout, {\n            startWidths: startWidths,\n            minWidths: minWidths,\n            maxWidths: maxWidths,\n            headerIdGridWidths: headerIdGridWidths,\n            columnWidth: columnWidth\n          })\n        });\n      } else {\n        return state;\n      }\n    }\n\n    if (action.type === actions.columnResizing) {\n      var clientX = action.clientX;\n      var startX = state.columnResizing.startX;\n\n      var _state$gridLayout = state.gridLayout,\n          _columnWidth = _state$gridLayout.columnWidth,\n          _minWidths = _state$gridLayout.minWidths,\n          _maxWidths = _state$gridLayout.maxWidths,\n          _state$gridLayout$hea = _state$gridLayout.headerIdGridWidths,\n          _headerIdGridWidths = _state$gridLayout$hea === void 0 ? [] : _state$gridLayout$hea;\n\n      var deltaX = clientX - startX;\n      var percentageDeltaX = deltaX / _columnWidth;\n      var newColumnWidths = {};\n\n      _headerIdGridWidths.forEach(function (_ref5) {\n        var headerId = _ref5[0],\n            headerWidth = _ref5[1];\n        newColumnWidths[headerId] = Math.min(Math.max(_minWidths[headerId], headerWidth + headerWidth * percentageDeltaX), _maxWidths[headerId]);\n      });\n\n      return _extends({}, state, {\n        gridLayout: _extends({}, state.gridLayout, {\n          columnWidths: _extends({}, state.gridLayout.columnWidths, {}, newColumnWidths)\n        })\n      });\n    }\n\n    if (action.type === actions.columnDoneResizing) {\n      return _extends({}, state, {\n        gridLayout: _extends({}, state.gridLayout, {\n          startWidths: {},\n          minWidths: {},\n          maxWidths: {}\n        })\n      });\n    }\n  }\n\n  function getElementWidth(columnId) {\n    var _document$getElementB;\n\n    var width = (_document$getElementB = document.getElementById(\"header-cell-\" + columnId)) == null ? void 0 : _document$getElementB.offsetWidth;\n\n    if (width !== undefined) {\n      return width;\n    }\n  }\n\n  exports._UNSTABLE_usePivotColumns = _UNSTABLE_usePivotColumns;\n  exports.actions = actions;\n  exports.defaultColumn = defaultColumn;\n  exports.defaultGroupByFn = defaultGroupByFn;\n  exports.defaultOrderByFn = defaultOrderByFn;\n  exports.defaultRenderer = defaultRenderer;\n  exports.emptyRenderer = emptyRenderer;\n  exports.ensurePluginOrder = ensurePluginOrder;\n  exports.flexRender = flexRender;\n  exports.functionalUpdate = functionalUpdate;\n  exports.loopHooks = loopHooks;\n  exports.makePropGetter = makePropGetter;\n  exports.makeRenderer = makeRenderer;\n  exports.reduceHooks = reduceHooks;\n  exports.safeUseLayoutEffect = safeUseLayoutEffect;\n  exports.useAbsoluteLayout = useAbsoluteLayout;\n  exports.useAsyncDebounce = useAsyncDebounce;\n  exports.useBlockLayout = useBlockLayout;\n  exports.useColumnOrder = useColumnOrder;\n  exports.useExpanded = useExpanded;\n  exports.useFilters = useFilters;\n  exports.useFlexLayout = useFlexLayout;\n  exports.useGetLatest = useGetLatest;\n  exports.useGlobalFilter = useGlobalFilter;\n  exports.useGridLayout = useGridLayout;\n  exports.useGroupBy = useGroupBy;\n  exports.useMountedLayoutEffect = useMountedLayoutEffect;\n  exports.usePagination = usePagination;\n  exports.useResizeColumns = useResizeColumns;\n  exports.useRowSelect = useRowSelect;\n  exports.useRowState = useRowState;\n  exports.useSortBy = useSortBy;\n  exports.useTable = useTable;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js","../src/plugin-hooks/useGridLayout.js"],"names":["renderErr","actions","init","defaultRenderer","value","emptyRenderer","defaultColumn","Cell","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","propList","style","className","rest","next","props","handlePropGetter","userProps","Array","mergeProps","makePropGetter","meta","reduceHooks","nextValue","console","loopHooks","hook","pluginIndex","plugin","befores","beforeIndex","updater","ref","React","safeUseLayoutEffect","useEffect","mountedRef","fn","defaultWait","debounceRef","getDefaultFn","useGetLatest","getDefaultWait","args","clearTimeout","setTimeout","Comp","column","flexRender","isReactComponent","isClassComponent","isExoticComponent","proto","Object","component","depth","parent","assignColumnAccessor","linkColumnStructure","flattenBy","id","accessor","Header","accessorPath","getBy","Footer","originalWidth","additionalHeaderProperties","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","d","latestParentColumn","newParent","originalId","decorateColumn","placeholderOf","pathObjCache","cacheKey","JSON","pathObj","makePathArray","val","cursor","i","flat","recurse","arr","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","addToExpandedRows","row","rows","isFunction","userFilterTypes","filterTypes","autoRemove","passiveSupported","supported","options","window","reOpenBracket","reCloseBracket","String","newArr","flattenDeep","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","key","colSpan","defaultGetFooterProps","totalVisibleHeaderCount","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","useOptions","stateReducers","useControlledState","columns","columnsDeps","allColumns","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","useColumnVisibility","hooks","instance","defaultGetToggleHiddenProps","onChange","e","checked","title","defaultGetToggleHideAllColumnsProps","indeterminate","length","action","hiddenColumns","should","state","functionalUpdate","shouldAll","isMountedRef","handleColumn","parentVisible","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","allColumnsHidden","toggleHideColumn","type","columnId","setHiddenColumns","toggleHideAllColumns","getToggleHideAllColumnsProps","getAutoResetHiddenColumns","useMountedLayoutEffect","resetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","initialState","getSubRows","getRowId","stateReducer","useTable","plugins","applyDefaults","instanceRef","makeDefaultPluginHooks","data","userColumns","getStateReducer","reducer","handler","reducerState","flattenColumns","flatRows","rowsById","allColumnsQueue","accessRowsForColumn","accessValueHooks","initialRows","duplicateColumns","makeHeaderGroups","visibleColumnsDep","totalColumnsMinWidth","totalColumnsWidth","totalColumnsMaxWidth","calculateHeaderWidths","makeRenderer","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","subHeaders","header","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","accessRow","original","cells","parentRows","subRows","useExpanded","defaultGetToggleAllRowsExpandedProps","onClick","defaultGetToggleRowExpandedProps","isAllRowsExpanded","expandAll","setExpanded","exists","shouldExist","_","paginateExpandedRows","autoResetExpanded","ensurePluginOrder","getAutoResetExpanded","Boolean","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","expandRows","expandedDepth","findExpandedDepth","getToggleAllRowsExpandedProps","preExpandedRows","maxDepth","splitId","text","rowValue","exactText","exactTextCase","includes","includesAll","includesSome","includesValue","filterValue","exact","equals","between","min","max","temp","useFilters","filters","filterMethod","getFilterMethod","previousfilter","newFilter","shouldAutoRemoveFilter","filter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","setFilter","setAllFilters","columnDefaultCanFilter","columnDisableFilters","getFirstDefined","found","filteredRows","filteredFlatRows","filteredRowsById","filterRows","nonFilteredColumns","getAutoResetFilters","resetFilters","preFilteredRows","preFilteredFlatRows","preFilteredRowsById","useGlobalFilter","globalFilter","undefined","stateWithoutGlobalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","setGlobalFilter","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","columnDisableGlobalFilter","filterableColumns","c","getAutoResetGlobalFilter","resetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","values","mid","nums","a","emptyArray","emptyObject","useGroupBy","defaultGetGroupByToggleProps","groupBy","setGroupBy","resolvedGroupBy","groupByColumns","col","nonGroupByColumns","defaultUserAggregations","groupByFn","manualGroupBy","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","columnDisableGroupBy","toggleGroupBy","groupedRows","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","existingGroupBy","aggregateRowsToValues","aggregateFn","aggregations","groupedValues","leafValues","columnValue","aggregateValueFn","groupUpRecursively","rowGroupsMap","aggregatedGroupedRows","groupByVal","parentId","leafRows","isGrouped","groupByID","subRow","getAutoResetGroupBy","resetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","resKey","prev","reSplitAlphaNumeric","alphanumeric","b","getRowValuesByColumnID","toString","aa","bb","an","parseInt","bn","combo","isNaN","compareBasic","alower","blower","replaceNonNumeric","row1","row2","useSortBy","defaultGetSortByToggleProps","isMultiSortEvent","sortBy","newSortBy","desc","multi","disableMultiSort","disableSortRemove","disableMultiRemove","maxMultiSortColCount","sortDescFirst","existingSortBy","existingIndex","hasDescDefined","sortAction","orderByFn","userSortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","setSortBy","toggleSortBy","defaultColumnCanSort","columnDisableSortBy","canSort","columnSort","sortedRows","sortedFlatRows","availableSortBy","sort","sortData","sortedData","sortType","sortMethod","sortTypes","getAutoResetSortBy","resetSortBy","preSortedRows","preSortedFlatRows","funcs","sortFn","dirs","sortInt","rowA","rowB","pluginName","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","resetPage","pageOptions","pageStart","pageEnd","canPreviousPage","canNextPage","gotoPage","previousPage","old","nextPage","setPageSize","_UNSTABLE_usePivotColumns","defaultPivotColumns","defaultGetPivotToggleProps","pivotColumns","setPivot","resolvedPivot","sourceColumns","buildPivotColumns","pivotFilters","pivotColumn","canPivot","isPivoted","sourceColumn","uniqueValues","columnGroup","isPivotGroup","pivotValue","uniqueValue","newMaterialized","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","columnDisablePivot","togglePivot","getAutoResetPivot","resetPivot","useRowSelect","defaultGetToggleRowSelectedProps","manualRowSelectedKey","isSomeSelected","defaultGetToggleAllRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","selectedRowIds","setSelected","isAllRowsSelected","selectAll","selectSubRows","isSelected","newSelectedRowIds","handleRowById","isAllPageRowsSelected","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","getAutoResetSelectedRows","resetSelectedRows","toggleAllRowsSelected","toggleAllPageRowsSelected","toggleRowSelected","getToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","allChildrenSelected","someSelected","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","rowId","oldRowState","oldCellState","cellState","autoResetRowState","setRowState","setCellState","getAutoResetRowState","resetRowState","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","useResizeColumns","position","defaultGetResizerProps","onResizeStart","isTouchEvent","headersToResize","getLeafHeaders","headerIdWidths","clientX","dispatchEnd","raf","columnDoneResizing","dispatchMove","mostRecentClientX","scheduleDispatchMoveOnNextAnimationFrame","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","document","touch","events","passiveIfSupported","passiveEventSupported","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnResizing","columnWidths","startX","isResizingColumn","deltaX","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","canResize","autoResetResize","getAutoResetResize","resetResize","resetResizing","leafHeaders","recurseHeader","cellStyles","top","useAbsoluteLayout","getRowStyles","display","boxSizing","useBlockLayout","useFlexLayout","flex","useGridLayout","gridTemplateColumns","gridColumn","gridLayout","getElementWidth","startWidths","minWidths","maxWidths","headerIdGridWidths"],"mappings":"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","sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultRenderer = ({ value = '' }) => value;\nexport const emptyRenderer = () => <>&nbsp;</>;\n\nexport const defaultColumn = {\n  Cell: defaultRenderer,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import { defaultColumn, emptyRenderer } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: emptyRenderer,\n    Footer: emptyRenderer,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = (row, addToExpandedRows = true) => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    if (addToExpandedRows) {\n      expandedRows.push(row)\n    }\n\n    if (row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\n    }\n  }\n\n  rows.forEach(row => handleRow(row))\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { rowsById } = instance\n\n    const isAllRowsExpanded =\n      Object.keys(rowsById).length === Object.keys(state.expanded).length\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = values[0] || 0\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.setGroupBy = 'setGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = React.useCallback(\n    value => {\n      dispatch({ type: actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          // Get the columnValues to aggregate\n          const groupedValues = groupedRows.map(row => row.values[column.id])\n\n          // Get the columnValues to aggregate\n          const leafValues = leafRows.map(row => {\n            let columnValue = row.values[column.id]\n\n            if (!depth && column.aggregateValue) {\n              const aggregateValueFn =\n                typeof column.aggregateValue === 'function'\n                  ? column.aggregateValue\n                  : userAggregations[column.aggregateValue] ||\n                    aggregations[column.aggregateValue]\n\n              if (!aggregateValueFn) {\n                console.info({ column })\n                throw new Error(\n                  `React Table: Invalid column.aggregateValue option for column listed above`\n                )\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column)\n            }\n            return columnValue\n          })\n\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows.map((row) => ({ ...row, depth }))\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (row) {\n        if (!row.isGrouped) {\n          if (shouldExist) {\n            newSelectedRowIds[id] = true\n          } else {\n            delete newSelectedRowIds[id]\n          }\n        }\n\n        if (selectSubRows && getSubRows(row)) {\n          return getSubRows(row).forEach(row => handleRowById(row.id))\n        }\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = row => ({})\nconst defaultInitialCellStateAccessor = cell => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\n          )\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(cell)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    let raf\n    let mostRecentClientX\n\n    const dispatchEnd = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnDoneResizing })\n    }\n    const dispatchMove = () => {\n      window.cancelAnimationFrame(raf)\n      raf = null\n      dispatch({ type: actions.columnResizing, clientX: mostRecentClientX })\n    }\n\n    const scheduleDispatchMoveOnNextAnimationFrame = clientXPos => {\n      mostRecentClientX = clientXPos\n      if (!raf) {\n        raf = window.requestAnimationFrame(dispatchMove)\n      }\n    }\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => scheduleDispatchMoveOnNextAnimationFrame(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          scheduleDispatchMoveOnNextAnimationFrame(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n","import { actions } from '../publicUtils'\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getRowProps.push(getRowProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => {\n  const gridTemplateColumns = instance.visibleColumns.map(column => {\n    if (instance.state.gridLayout.columnWidths[column.id])\n      return `${instance.state.gridLayout.columnWidths[column.id]}px`\n    // When resizing, lock the width of all unset columns\n    // instead of using user-provided width or defaultColumn width,\n    // which could potentially be 'auto' or 'fr' units that don't scale linearly\n    if (instance.state.columnResizing?.isResizingColumn)\n      return `${instance.state.gridLayout.startWidths[column.id]}px`\n    if (typeof column.width === 'number') return `${column.width}px`\n    return column.width\n  })\n  return [\n    props,\n    {\n      style: {\n        display: `grid`,\n        gridTemplateColumns: gridTemplateColumns.join(` `),\n      },\n    },\n  ]\n}\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky`, //enables a scroll wrapper to be placed around the table and have sticky headers\n      gridColumn: `span ${column.totalVisibleHeaderCount}`,\n    },\n  },\n]\n\nconst getRowProps = (props, { row }) => {\n  if (row.isExpanded) {\n    return [\n      props,\n      {\n        style: {\n          gridColumn: `1 / ${row.cells.length + 1}`,\n        },\n      },\n    ]\n  }\n  return [props, {}]\n}\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      gridLayout: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      gridLayout: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { columnId, headerIdWidths } = action\n    const columnWidth = getElementWidth(columnId)\n\n    if (columnWidth !== undefined) {\n      const startWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: getElementWidth(column.id),\n        }),\n        {}\n      )\n      const minWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.minWidth,\n        }),\n        {}\n      )\n      const maxWidths = instance.visibleColumns.reduce(\n        (acc, column) => ({\n          ...acc,\n          [column.id]: column.maxWidth,\n        }),\n        {}\n      )\n\n      const headerIdGridWidths = headerIdWidths.map(([headerId]) => [\n        headerId,\n        getElementWidth(headerId),\n      ])\n\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          startWidths,\n          minWidths,\n          maxWidths,\n          headerIdGridWidths,\n          columnWidth,\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX } = state.columnResizing\n    const {\n      columnWidth,\n      minWidths,\n      maxWidths,\n      headerIdGridWidths = [],\n    } = state.gridLayout\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdGridWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.min(\n        Math.max(\n          minWidths[headerId],\n          headerWidth + headerWidth * percentageDeltaX\n        ),\n        maxWidths[headerId]\n      )\n    })\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: {\n          ...state.gridLayout.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        startWidths: {},\n        minWidths: {},\n        maxWidths: {},\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}\n"]},"metadata":{},"sourceType":"script"}